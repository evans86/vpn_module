<?php

namespace App\Services\Pack;

use App\Dto\PackSalesman\PackSalesmanDto;
use App\Dto\PackSalesman\PackSalesmanFactory;
use App\Models\PackSalesman\PackSalesman;
use App\Repositories\Pack\PackRepository;
use App\Repositories\PackSalesman\PackSalesmanRepository;
use App\Repositories\Salesman\SalesmanRepository;
use App\Services\Key\KeyActivateService;
use Exception;
use Illuminate\Support\Facades\Log;
use RuntimeException;
use Telegram\Bot\Api;

class PackSalesmanService
{
    private PackRepository $packRepository;
    private SalesmanRepository $salesmanRepository;
    private PackSalesmanRepository $packSalesmanRepository;

    private KeyActivateService $keyActivateService;

    public function __construct(
        PackRepository         $packRepository,
        SalesmanRepository     $salesmanRepository,
        PackSalesmanRepository $packSalesmanRepository,
        KeyActivateService     $keyActivateService
    )
    {
        $this->packRepository = $packRepository;
        $this->salesmanRepository = $salesmanRepository;
        $this->packSalesmanRepository = $packSalesmanRepository;
        $this->keyActivateService = $keyActivateService;
    }

    /**
     * –ü–∞–∫–µ—Ç –∫–ª—é—á–µ–π, –∫—É–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤—Ü–æ–º
     *
     * @param int $pack_id
     * @param int $salesman_id
     * @param int $status –æ–ø–ª–∞—á–µ–Ω/–Ω–µ –æ–ø–ª–∞—á–µ–Ω/–≤—ã—à–µ–ª —Å—Ä–æ–∫
     * @return PackSalesmanDto
     * @throws Exception
     */
    public function create(int $pack_id, int $salesman_id, int $status = PackSalesman::NOT_PAID): PackSalesmanDto
    {
        try {
            $pack = $this->packRepository->findByIdOrFail($pack_id);

            $salesman = $this->salesmanRepository->findByIdOrFail($salesman_id);

            $pack_salesman = new PackSalesman();

            $pack_salesman->pack_id = $pack->id;
            $pack_salesman->salesman_id = $salesman->id;
            if ($pack->price == 0)
                $pack_salesman->status = PackSalesman::PAID;
            else
                $pack_salesman->status = $status;

            if (!$pack_salesman->save())
                throw new RuntimeException('Pack Salesman dont create');

            return PackSalesmanFactory::fromEntity($pack_salesman);
        } catch (RuntimeException $r) {
            throw new RuntimeException($r->getMessage());
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }

    /**
     * @param int $pack_salesman_id
     * @return void
     * @throws Exception
     */
    public function success(int $pack_salesman_id): void
    {
        try {
            $pack_salesman = $this->packSalesmanRepository->findByIdOrFail($pack_salesman_id);

            //–î–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å PAID, –ø–æ–∫–∞ —Å—Ä–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            $pack_salesman->status = PackSalesman::PAID;

            if (!$pack_salesman->save())
                throw new RuntimeException('Pack Salesman dont update status');

            //–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            self::successPaid($pack_salesman->id);
        } catch (RuntimeException $r) {
            throw new RuntimeException($r->getMessage());
        } catch (Exception $e) {
            throw new Exception($e->getMessage());
        }
    }

    /**
     * @param int $pack_salesman_id
     * @return void
     * @throws Exception
     */
    private function successPaid(int $pack_salesman_id): void
    {
        try {
            $pack_salesman = $this->packSalesmanRepository->findByIdOrFail($pack_salesman_id);
            $pack = $this->packRepository->findByIdOrFail($pack_salesman->pack_id);
            $salesman = $this->salesmanRepository->findByIdOrFail($pack_salesman->salesman_id);

            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–∞–∫–µ—Ç–∞
            for ($i = 0; $i < $pack->count; $i++) {
                $now = time();
                $period_days = min($pack->period, 365 * 2);
                $activate_days = $pack->activate_time / 86400;
//                $finish_at = $now + ($period_days * 24 * 60 * 60);
//                $deleted_at = $now + ($activate_days * 24 * 60 * 60);

                try {
                    $this->keyActivateService->create(
                        $pack->traffic_limit,
                        $pack_salesman->id,
                        null,
                        null,
                        null
                    );
                } catch (Exception $e) {
                    Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: " . $e->getMessage());
                    throw new RuntimeException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: ' . $e->getMessage());
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FatherBot
            $message = "‚úÖ –í–∞—à –ø–∞–∫–µ—Ç –Ω–∞ \"{$pack->count}\" –∫–ª—é—á–µ–π —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n";
            $message .= "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {$pack->count}\n";
            $message .= "‚è± –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è: {$pack->period} –¥–Ω–µ–π\n";
            $message .= "üíæ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
            $message .= "‚ö°Ô∏è –í—Ä–µ–º—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: " . intval($pack->activate_time / 86400) . " –¥–µ–Ω—å(–µ–π)\n\n";

            try {
                $telegram = new Api(config('telegram.father_bot.token'));
                $telegram->sendMessage([
                    'chat_id' => $salesman->telegram_id,
                    'text' => $message,
                    'parse_mode' => 'HTML'
                ]);
            } catch (Exception $e) {
                Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ FatherBot', [
                    'error' => $e->getMessage(),
                    'salesman_id' => $salesman->id,
                    'telegram_id' => $salesman->telegram_id
                ]);
            }

        } catch (Exception $e) {
            throw new Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–µ–π: ' . $e->getMessage());
        }
    }

    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    //@TODO
    public function checkStatus()
    {
        /**
         * @var PackSalesman[] $packs_salesman
         */
        $packs_salesman = PackSalesman::query()->where('status', PackSalesman::EXPIRED)->get();

        foreach ($packs_salesman as $pack_salesman) {

        }
    }
}
