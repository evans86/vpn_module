<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\KeyActivate\KeyActivate;
use App\Models\Panel\Panel;
use App\Models\Salesman\Salesman;
use App\Services\Panel\PanelStrategy;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Objects\CallbackQuery;

class SalesmanBotController extends AbstractTelegramBot
{
    private ?Salesman $salesman;
    private array $userPages = [];

    public function __construct(string $token)
    {
        parent::__construct($token);

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        $this->salesman = $this->salesmanRepository->findByToken($token);
        if (!$this->salesman) {
            Log::error('Salesman not found for token: ' . substr($token, 0, 10) . '...');
            throw new \RuntimeException('Salesman not found');
        }

        Log::debug('Initialized SalesmanBotController', [
            'salesman_id' => $this->salesman->id,
            'token' => substr($token, 0, 10) . '...'
        ]);
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ update
     */
    public function processUpdate(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
            if (!$this->salesman->bot_active) {
                $this->sendMessage("‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
                return;
            }

            $message = $this->update->getMessage();
            $callbackQuery = $this->update->getCallbackQuery();

            if ($callbackQuery) {
                $messageId = $callbackQuery->getMessage()->getMessageId();
                $data = $callbackQuery->getData();

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if (strpos($data, 'status_page_') === 0) {
                    $page = (int)str_replace('status_page_', '', $data);
                    $this->actionStatus($page, $messageId);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if (strpos($data, 'inactive_page_') === 0) {
                    $page = (int)str_replace('inactive_page_', '', $data);
                    $this->actionInactiveSubscriptions($page, $messageId);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
                if (strpos($data, 'subscription_details_') === 0) {
                    $keyId = str_replace('subscription_details_', '', $data);
                    $this->actionStatus(0, $messageId, $keyId);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if ($data === 'inactive_subscriptions') {
                    $this->actionInactiveSubscriptions(0, $messageId);
                    return;
                }
            }

            if (!$message || !$message->getText()) {
                return;
            }

            $text = $message->getText();

            if ($text === '/start') {
                $this->start();
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
            switch ($text) {
                case 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å':
                    $this->actionActivate();
                    break;
                case 'üìä –°—Ç–∞—Ç—É—Å':
                    $this->actionStatus();
                    break;
                case '‚ùì –ü–æ–º–æ—â—å':
                    $this->actionHelp();
                    break;
                default:
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª—é—á
                    if ($this->isValidKeyFormat($text)) {
                        $this->handleKeyActivation($text);
                    } else {
                        $this->sendMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
                    }
            }
        } catch (\Exception $e) {
            Log::error('Process update error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function start(): void
    {
        try {
            $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!\n\n";
            $message .= "üî∏ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∞—à VPN –¥–æ—Å—Ç—É–ø\n";
            $message .= "üî∏ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n";
            $message .= "üî∏ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ";

            $this->generateMenu($message);
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function generateMenu($message): void
    {
        $keyboard = [
            'keyboard' => [
                [
                    ['text' => 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å']
                ],
                [
                    ['text' => 'üìä –°—Ç–∞—Ç—É—Å'],
                    ['text' => '‚ùì –ü–æ–º–æ—â—å']
                ]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];

        $this->telegram->sendMessage([
            'chat_id' => $this->chatId,
            'text' => $message,
            'reply_markup' => json_encode($keyboard)
        ]);
    }

    protected function actionActivate(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            $existingKey = $this->keyActivateRepository->findActiveKeyByUserAndSalesman(
                $this->chatId,
                $this->salesman->id
            );

            if ($existingKey) {
                $finishDate = date('d.m.Y', $existingKey->finish_at);
                $this->sendMessage("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN-–¥–æ—Å—Ç—É–ø –¥–æ {$finishDate}.\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin");
                return;
            }

            $this->sendMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:");
        } catch (\Exception $e) {
            Log::error('Activate action error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function actionStatus(int $page = 0, ?int $messageId = null, ?string $keyId = null): void
    {
        try {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω keyId, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            if ($keyId !== null) {
                $this->showSubscriptionDetails($keyId, $messageId);
                return;
            }

            $chatId = $this->chatId;
            $this->setCurrentPage($chatId, $page);

            /**
             * @var KeyActivate[] $activeKeys
             */
            $activeKeys = $this->keyActivateRepository->findAllActiveKeysByUser(
                $this->chatId,
                $this->salesman->id,
                KeyActivate::ACTIVE
            );

            if ($activeKeys->isEmpty()) {
                $keyboard = [
                    'inline_keyboard' => [
                        [['text' => 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', 'callback_data' => 'activate_key']],
                        [['text' => 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö', 'callback_data' => 'inactive_subscriptions']]
                    ]
                ];
                $this->sendMessage("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–¥–æ—Å—Ç—É–ø–æ–≤.\n\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á.", $keyboard);
                return;
            }

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            $perPage = 5;
            $totalPages = ceil($activeKeys->count() / $perPage);
            $currentPageKeys = $activeKeys->slice($page * $perPage, $perPage);

            $message = "üìä *–í–∞—à–∏ VPN-–ø–æ–¥–ø–∏—Å–∫–∏:*\n\n";

            /**
             * @var KeyActivate $key
             */
            foreach ($currentPageKeys as $key) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ñ–∏–∫–µ —Å –ø–∞–Ω–µ–ª–∏
                    $panelStrategy = new PanelStrategy($key->keyActivateUser->serverUser->panel->panel);
                    $info = $panelStrategy->getSubscribeInfo($key->keyActivateUser->serverUser->panel->id, $key->keyActivateUser->serverUser->id);
                } catch (\Exception $e) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    Log::error('Failed to get subscription info for key ' . $key->id . ': ' . $e->getMessage());
                    $info = ['used_traffic' => null];
                }

                $finishDate = date('d.m.Y', $key->finish_at);
                $daysRemaining = ceil(($key->finish_at - time()) / (60 * 60 * 24)); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏

                $message .= "üîë *–ü–æ–¥–ø–∏—Å–∫–∞ <code>{$key->id}</code>*\n";
                $message .= "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {$finishDate}\n";
                $message .= "‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {$daysRemaining} –¥–Ω–µ–π\n";

                if ($key->traffic_limit) {
                    $trafficGB = round($key->traffic_limit / (1024 * 1024 * 1024), 2);
                    $message .= "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {$trafficGB} GB\n";
                }

                if ($info['used_traffic']) {
                    $trafficUsedGB = round($info['used_traffic'] / (1024 * 1024 * 1024), 2);
                    $message .= "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {$trafficUsedGB} GB\n";
                }

                $message .= "üîó [–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é](https://vpn-telegram.com/config/{$key->id})\n\n";
            }

            $message .= "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " . ($page + 1) . " –∏–∑ $totalPages";

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            $keyboard = [
                'inline_keyboard' => []
            ];

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            foreach ($currentPageKeys as $key) {
                $keyboard['inline_keyboard'][] = [
                    ['text' => 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ ' . $key->id, 'callback_data' => 'subscription_details_' . $key->id]
                ];
            }

            // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            $paginationButtons = [];

            if ($page > 0) {
                $paginationButtons[] = ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'status_page_' . ($page - 1)];
                $paginationButtons[] = ['text' => '–í –Ω–∞—á–∞–ª–æ', 'callback_data' => 'status_page_0'];
            }

            if ($page < $totalPages - 1) {
                $paginationButtons[] = ['text' => '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data' => 'status_page_' . ($page + 1)];
            }

            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö"
            $keyboard['inline_keyboard'][] = [
                ['text' => 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö', 'callback_data' => 'inactive_subscriptions']
            ];

            if (!empty($paginationButtons)) {
                $keyboard['inline_keyboard'][] = $paginationButtons;
            }

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }

        } catch (\Exception $e) {
            Log::error('Status action error: ' . $e->getMessage() . ' | User ID: ' . $this->chatId . ' | Page: ' . $page);
            $this->sendErrorMessage();
        }
    }

    protected function actionInactiveSubscriptions(int $page = 0, ?int $messageId = null): void
    {
        try {
            $chatId = $this->chatId;
            $this->setCurrentPage($chatId, $page);

            /**
             * @var KeyActivate[] $inactiveKeys
             */
            $inactiveKeys = $this->keyActivateRepository->findAllActiveKeysByUser(
                $this->chatId,
                $this->salesman->id,
                KeyActivate::EXPIRED
            );

            if ($inactiveKeys->isEmpty()) {
                $this->sendMessage("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–¥–æ—Å—Ç—É–ø–æ–≤.");
                return;
            }

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            $perPage = 5;
            $totalPages = ceil($inactiveKeys->count() / $perPage);
            $currentPageKeys = $inactiveKeys->slice($page * $perPage, $perPage);

            $message = "üìã *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ VPN-–ø–æ–¥–ø–∏—Å–∫–∏:*\n\n";

            foreach ($currentPageKeys as $key) {
                $finishDate = date('d.m.Y', $key->finish_at);
                $daysRemaining = ceil(($key->finish_at - time()) / (60 * 60 * 24)); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏

                $message .= "üîë *–ü–æ–¥–ø–∏—Å–∫–∞ <code>{$key->id}</code>*\n";
                $message .= "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {$finishDate}\n";
                $message .= "‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {$daysRemaining} –¥–Ω–µ–π\n";

                if ($key->traffic_limit) {
                    $trafficGB = round($key->traffic_limit / (1024 * 1024 * 1024), 2);
                    $message .= "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {$trafficGB} GB\n";
                }

                $message .= "üîó [–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é](https://vpn-telegram.com/config/{$key->id})\n\n";
            }

            $message .= "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " . ($page + 1) . " –∏–∑ $totalPages";

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            $keyboard = [
                'inline_keyboard' => []
            ];

            // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            $paginationButtons = [];

            if ($page > 0) {
                $paginationButtons[] = ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'inactive_page_' . ($page - 1)];
                $paginationButtons[] = ['text' => '–í –Ω–∞—á–∞–ª–æ', 'callback_data' => 'inactive_page_0'];
            }

            if ($page < $totalPages - 1) {
                $paginationButtons[] = ['text' => '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data' => 'inactive_page_' . ($page + 1)];
            }

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º"
            $keyboard['inline_keyboard'][] = [
                ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º', 'callback_data' => 'status_page_0']
            ];

            if (!empty($paginationButtons)) {
                $keyboard['inline_keyboard'][] = $paginationButtons;
            }

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }

        } catch (\Exception $e) {
            Log::error('Inactive subscriptions action error: ' . $e->getMessage() . ' | User ID: ' . $this->chatId . ' | Page: ' . $page);
            $this->sendErrorMessage();
        }
    }

    protected function showSubscriptionDetails(string $keyId, ?int $messageId = null): void
    {
        try {
            /**
             * @var KeyActivate $key
             */
            $key = $this->keyActivateRepository->findById($keyId);

            if (!$key) {
                $this->sendMessage("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }

            $finishDate = date('d.m.Y', $key->finish_at);
            $daysRemaining = ceil(($key->finish_at - time()) / (60 * 60 * 24)); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏

            $message = "üîë *–ü–æ–¥–ø–∏—Å–∫–∞ <code>{$key->id}</code>*\n";
            $message .= "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {$finishDate}\n";
            $message .= "‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {$daysRemaining} –¥–Ω–µ–π\n";

            if ($key->traffic_limit) {
                $trafficGB = round($key->traffic_limit / (1024 * 1024 * 1024), 2);
                $message .= "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {$trafficGB} GB\n";
            }

            if ($key->traffic_used) {
                $trafficUsedGB = round($key->traffic_used / (1024 * 1024 * 1024), 2);
                $message .= "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {$trafficUsedGB} GB\n";
            }

            $message .= "üîó [–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é](https://vpn-telegram.com/config/{$key->id})\n\n";

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫"
            $keyboard = [
                'inline_keyboard' => [
                    [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫', 'callback_data' => 'status_page_0']]
                ]
            ];

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }

        } catch (\Exception $e) {
            Log::error('Subscription details error: ' . $e->getMessage() . ' | User ID: ' . $this->chatId . ' | Key ID: ' . $keyId);
            $this->sendErrorMessage();
        }
    }

    protected function getCurrentPage(int $chatId): int
    {
        return $this->userPages[$chatId] ?? 0;
    }

    protected function setCurrentPage(int $chatId, int $page): void
    {
        $this->userPages[$chatId] = $page;
    }

    protected function actionHelp(): void
    {
        $text = "*‚ùì –ü–æ–º–æ—â—å*\n\n";
        $text .= "üîπ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è VPN:*\n";
        $text .= "1. –ù–∞–∂–º–∏—Ç–µ 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'\n";
        $text .= "2. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á\n";
        $text .= "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n\n";
        $text .= "üîπ *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:*\n";
        $text .= "1. –ù–∞–∂–º–∏—Ç–µ 'üìä –°—Ç–∞—Ç—É—Å'\n";
        $text .= "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –¥–æ—Å—Ç—É–ø–µ\n\n";
        $text .= "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞";

        $this->sendMessage($text);
    }

    protected function handleKeyActivation(string $keyId): void
    {
        try {
            $key = $this->keyActivateRepository->findById($keyId);

            if (!$key) {
                $this->sendMessage("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
            if ($key->status != KeyActivate::PAID) {
                $this->sendMessage("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.\n\n–ö–ª—é—á —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if ($key->finish_at && $key->finish_at < time()) {
                $this->sendMessage("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç–µ–∫.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª—é—á
            if ($key->user_tg_id) {
                $this->sendMessage("‚ùå –ö–ª—é—á —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n–ö–∞–∂–¥—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.");
                return;
            }

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            $result = $this->keyActivateService->activate($key, $this->chatId);

            if ($result) {
                $this->sendSuccessActivation($key);
            } else {
                $this->sendMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin");
            }
        } catch (\Exception $e) {
            Log::error('Key activation error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function sendSuccessActivation(KeyActivate $key): void
    {
        $finishDate = date('d.m.Y', $key->finish_at);

        $text = "‚úÖ VPN —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n";
        $text .= "üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {$finishDate}\n";

        if ($key->traffic_limit) {
            $trafficGB = round($key->traffic_limit / (1024 * 1024 * 1024), 2);
            $text .= "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {$trafficGB} GB\n\n";
        }

        $text .= "üîó *–í–∞—à–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*\n";
        $text .= "[–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é](https://vpn-telegram.com/config/{$key->id})\n\n";

        $text .= "üì± *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π VPN-–∫–ª–∏–µ–Ω—Ç:*\n";
        $text .= "–î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify:\n\n";
        $text .= "üì≤ *Android:* [–°–∫–∞—á–∞—Ç—å Hiddify](https://play.google.com/store/apps/details?id=app.hiddify.com)\n";
        $text .= "üì≤ *iOS:* [–°–∫–∞—á–∞—Ç—å Hiddify](https://apps.apple.com/app/hiddify/id6451357551)\n\n";

        $text .= "üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:*\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n";
        $text .= "3. –ù–∞–∂–º–∏—Ç–µ '+' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n";
        $text .= "4. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã—à–µ\n";
        $text .= "5. –ù–∞–∂–º–∏—Ç–µ 'Connect'\n\n";

        $text .= "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üì≤ Android - Hiddify',
                        'url' => 'https://play.google.com/store/apps/details?id=app.hiddify.com'
                    ]
                ],
                [
                    [
                        'text' => 'üì≤ iOS - Hiddify',
                        'url' => 'https://apps.apple.com/app/hiddify/id6451357551'
                    ]
                ]
            ]
        ];

        $this->sendMessage($text, $keyboard);
    }

    private function isValidKeyFormat(string $text): bool
    {
        return strlen($text) === 36; // –ü—Ä–∏–º–µ—Ä –¥–ª—è UUID
    }
}
