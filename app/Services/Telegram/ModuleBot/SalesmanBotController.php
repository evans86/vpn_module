<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\KeyActivate\KeyActivate;
use App\Models\Salesman\Salesman;
use Exception;
use Illuminate\Support\Facades\Log;

class SalesmanBotController extends AbstractTelegramBot
{
    private ?Salesman $salesman = null;
    private ?KeyActivate $currentPack = null;
    private const STATE_WAITING_KEY = 'waiting_key';

    public function __construct(string $token)
    {
        parent::__construct($token);

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        $this->salesman = $this->salesmanRepository->findByToken($token);
        if (!$this->salesman) {
            Log::error('Salesman not found for token: ' . substr($token, 0, 10) . '...');
            throw new \RuntimeException('Salesman not found');
        }

        Log::debug('Initialized SalesmanBotController', [
            'salesman_id' => $this->salesman->id,
            'token' => substr($token, 0, 10) . '...'
        ]);
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ update
     */
    public function processUpdate(): void
    {
        try {
            $message = $this->update->getMessage();
            $callbackQuery = $this->update->getCallbackQuery();

            if ($callbackQuery) {
                Log::info('Received callback query', [
                    'data' => $callbackQuery->getData(),
                    'from' => $callbackQuery->getFrom()->getId()
                ]);
                $this->processCallback($callbackQuery->getData());
                return;
            }

            if ($message) {
                $text = $message->getText();

                if (!$text) {
                    Log::warning('Received message without text', [
                        'message' => $message
                    ]);
                    return;
                }

                if ($text === '/start') {
                    $this->start();
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
                switch ($text) {
                    case 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å':
                        $this->actionActivate();
                        break;
                    case 'üìä –°—Ç–∞—Ç—É—Å':
                        $this->actionStatus();
                        break;
                    case '‚ùì –ü–æ–º–æ—â—å':
                        $this->actionSupport();
                        break;
                    default:
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
                        $salesman = Salesman::where('telegram_id', $this->chatId)->first();
                        if ($salesman && $salesman->state === self::STATE_WAITING_KEY) {
                            $this->handleKeyActivation($text);
                        } else {
                            $this->sendMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
                        }
                }
            }
        } catch (Exception $e) {
            Log::error('Error processing update in SalesmanBot', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    private function clearState(): void
    {
        $salesman = Salesman::where('telegram_id', $this->chatId)->first();
        if ($salesman) {
            $salesman->state = null;
            $salesman->save();
        }
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback
     *
     * @param string $data
     */
    private function processCallback(string $data): void
    {
        try {
            Log::info('Processing callback data', ['data' => $data]);

            $params = json_decode($data, true);
            if (!$params || !isset($params['action'])) {
                Log::error('Invalid callback data', ['data' => $data]);
                return;
            }

            switch ($params['action']) {
                default:
                    Log::warning('Unknown callback action', [
                        'action' => $params['action'],
                        'data' => $data
                    ]);
            }
        } catch (Exception $e) {
            Log::error('Process callback error: ' . $e->getMessage(), [
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ start
     */
    protected function start(): void
    {
        try {
            $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!\n\n";
            $message .= "üî∏ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∞—à VPN –¥–æ—Å—Ç—É–ø\n";
            $message .= "üî∏ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n";
            $message .= "üî∏ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n";

            $this->generateMenu($message);
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
     */
    protected function generateMenu($message): void
    {
        $keyboard = [
            'keyboard' => [
                [
                    ['text' => 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å']
                ],
                [
                    ['text' => 'üìä –°—Ç–∞—Ç—É—Å'],
                    ['text' => '‚ùì –ü–æ–º–æ—â—å']
                ]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];

        $this->telegram->sendMessage([
            'chat_id' => $this->chatId,
            'text' => $message,
            'reply_markup' => json_encode($keyboard)
        ]);
    }

    /**
     * Support action
     */
    private function actionSupport(): void
    {
        $text = "
            <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN:</b>\n
            1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –º–µ–Ω—é\n
            2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n
            3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n
            \n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @support";
        $this->sendMessage($text);
    }

    /**
     * Status action
     */
    private function actionStatus(): void
    {
        try {
            $userId = $this->update->getMessage()->getFrom()->getId();

            // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            $this->currentPack = $this->keyActivateRepository->findActiveKeyByUserAndSalesman(
                $userId,
                $this->salesman->id
            );

            if (!$this->currentPack) {
                $this->sendMessage("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–¥–æ—Å—Ç—É–ø–æ–≤. –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @" . $this->getSalesmanUsername());
                return;
            }

            $text = "
                <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º VPN-–¥–æ—Å—Ç—É–ø–µ:</b>\n
                ID –¥–æ—Å—Ç—É–ø–∞: <code>" . $this->currentPack->id . "</code>\n
                –°—Ç–∞—Ç—É—Å: " . $this->currentPack->getStatusText() . "\n
                –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: " . $this->currentPack->created_at->format('d.m.Y') . "\n
                –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: " . $this->currentPack->finish_at->format('d.m.Y') . "\n" .
                ($this->currentPack->traffic_limit ? "–û—Å—Ç–∞—Ç–æ–∫ —Ç—Ä–∞—Ñ–∏–∫–∞: " . round($this->currentPack->traffic_limit / 1024 / 1024 / 1024, 2) . " GB" : "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫");

            $this->sendMessage($text);
        } catch (\Exception $e) {
            Log::error('Pack info error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Activate action
     */
    private function actionActivate(): void
    {
        try {
            $userId = $this->update->getMessage()->getFrom()->getId();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            $existingPack = $this->keyActivateRepository->findActiveKeyByUserAndSalesman(
                $userId,
                $this->salesman->id
            );

            if ($existingPack) {
                $this->sendMessage("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN-–¥–æ—Å—Ç—É–ø –¥–æ {$existingPack->finish_at->format('d.m.Y')}.\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @{$this->getSalesmanUsername()}");
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if ($salesman) {
                $salesman->state = self::STATE_WAITING_KEY;
                $salesman->save();
            }

            $this->sendMessage("<b>–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>");

        } catch (\Exception $e) {
            Log::error('Activation error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle key activation
     */
    private function handleKeyActivation(string $keyId): void
    {
        try {
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            $this->clearState();

            // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            $key = $this->keyActivateRepository->findById($keyId);

            if (!$key) {
                $this->sendMessage("‚ùå –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ <code>" . $keyId . "</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
            if (!$this->keyActivateRepository->hasCorrectStatusForActivation($key)) {
                $this->sendMessage("‚ùå –ö–ª—é—á <code>" . $keyId . "</code> –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å).");
                return;
            }

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á
            $this->currentPack = $this->keyActivateService->activate($key, $this->chatId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            $this->sendSetupInstructions();
        } catch (\Exception $e) {
            Log::error('Key activation error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * VPN instructions
     */
    private function sendSetupInstructions(): void
    {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN
        $configUrl = config('app.url') . '/config/' . $this->currentPack->key;

        $text = "<b>üîê –í–∞—à VPN —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n";
        $text .= "<b>üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>\n\n";
        $text .= "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n";
        $text .= "<code>" . $configUrl . "</code>\n\n";

        // iOS
        $text .= "üçé <b>iOS:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ App Store\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n";
        $text .= "3. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å'\n\n";

        // Android
        $text .= "ü§ñ <b>Android:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ Google Play\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n";
        $text .= "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n";

        // Windows
        $text .= "üíª <b>Windows:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n";
        $text .= "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n";

        $text .= "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @" . $this->getSalesmanUsername();

        $this->sendMessage($text);
    }

    /**
     * Salesman username
     * @return string
     */
    private function getSalesmanUsername(): string
    {
        return $this->salesman->username ?? 'support';
    }
}
