<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\KeyActivate\KeyActivate;
use App\Models\Salesman\Salesman;
use App\Models\TelegramUser\TelegramUser;
use App\Services\Panel\PanelStrategy;
use Illuminate\Support\Facades\Log;
use RuntimeException;

class SalesmanBotController extends AbstractTelegramBot
{
    private ?Salesman $salesman;
    private array $userPages = [];

    public function __construct(string $token)
    {
        parent::__construct($token);

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        $this->salesman = $this->salesmanRepository->findByToken($token);
        if (!$this->salesman) {
            Log::error('Salesman not found for token: ' . substr($token, 0, 10) . '...');
            throw new RuntimeException('Salesman not found');
        }

        Log::info('Initialized SalesmanBotController', [
            'salesman_id' => $this->salesman->id,
            'token' => substr($token, 0, 10) . '...'
        ]);
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ update
     */
    public function processUpdate(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
            if (!$this->salesman->bot_active) {
                $this->sendMessage("‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
                return;
            }

            $message = $this->update->getMessage();
            $callbackQuery = $this->update->getCallbackQuery();

            if ($callbackQuery) {
                $messageId = $callbackQuery->getMessage()->getMessageId();
                $data = $callbackQuery->getData();

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if (strpos($data, 'status_page_') === 0) {
                    $page = (int)str_replace('status_page_', '', $data);
                    $this->actionStatus($page, $messageId);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if (strpos($data, 'inactive_page_') === 0) {
                    $page = (int)str_replace('inactive_page_', '', $data);
                    $this->actionInactiveSubscriptions($page, $messageId);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
                if (strpos($data, 'subscription_details_') === 0) {
                    $keyId = str_replace('subscription_details_', '', $data);
                    $this->actionStatus(0, $messageId, $keyId);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if ($data === 'inactive_subscriptions') {
                    $this->actionInactiveSubscriptions(0, $messageId);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if ($data === 'activate_key') {
                    $this->actionActivate();
                    return;
                }
            }

            if (!$message || !$message->getText()) {
                return;
            }

            $text = $message->getText();

            if ($text === '/start') {
                $this->start();
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
            switch ($text) {
                case 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å':
                    $this->actionActivate();
                    break;
                case 'üìä –°—Ç–∞—Ç—É—Å':
                    $this->actionStatus();
                    break;
                case '‚ùì –ü–æ–º–æ—â—å':
                    $this->actionHelp();
                    break;
                default:
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª—é—á
                    if ($this->isValidKeyFormat($text)) {
                        $this->handleKeyActivation($text);
                    } else {
                        $this->sendMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
                    }
            }
        } catch (\Exception $e) {
            Log::error('Process update error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function ensureTelegramUserExists(): void
    {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            $message = $this->update->getMessage();
            $from = $message->getFrom();

            $telegramId = $from->getId();
            $username = $from->getUsername();
            $firstName = $from->getFirstName();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
            $existingUser = TelegramUser::where('telegram_id', $telegramId)
                ->where('salesman_id', $this->salesman->id)
                ->first();

            if (!$existingUser) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                TelegramUser::create([
                    'salesman_id' => $this->salesman->id,
                    'telegram_id' => $telegramId,
                    'username' => $username,
                    'first_name' => $firstName,
                    'status' => 1, // –ø–æ–∫–∞ —Å—Ç–∞—Ç—É—Å "–∞–∫—Ç–∏–≤–µ–Ω"
                ]);

                Log::info('New Telegram user added', [
                    'telegram_id' => $telegramId,
                    'username' => $username,
                    'salesman_id' => $this->salesman->id,
                ]);
            }
        } catch (\Exception $e) {
            Log::error('Failed to ensure Telegram user exists: ' . $e->getMessage());
        }
    }

    protected function start(): void
    {
        try {
            $this->ensureTelegramUserExists();

            $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!\n\n";
            $message .= "üî∏ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∞—à VPN –¥–æ—Å—Ç—É–ø\n";
            $message .= "üî∏ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n";
            $message .= "üî∏ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ";

            $this->generateMenu($message);
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function generateMenu($message): void
    {
        $keyboard = [
            'keyboard' => [
                [
                    ['text' => 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å']
                ],
                [
                    ['text' => 'üìä –°—Ç–∞—Ç—É—Å'],
                    ['text' => '‚ùì –ü–æ–º–æ—â—å']
                ]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];

        $this->telegram->sendMessage([
            'chat_id' => $this->chatId,
            'text' => $message,
            'reply_markup' => json_encode($keyboard)
        ]);
    }

    protected function actionActivate(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            $existingKey = $this->keyActivateRepository->findActiveKeyByUserAndSalesman(
                $this->chatId,
                $this->salesman->id
            );

            if ($existingKey) {
                $finishDate = date('d.m.Y', $existingKey->finish_at);
                $this->sendMessage("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN-–¥–æ—Å—Ç—É–ø –¥–æ {$finishDate}.\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin");
                return;
            }

            $this->sendMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:");
        } catch (\Exception $e) {
            Log::error('Activate action error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function actionStatus(int $page = 0, ?int $messageId = null, ?string $keyId = null): void
    {
        try {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω keyId, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            if ($keyId !== null) {
                $this->showSubscriptionDetails($keyId, $messageId);
                return;
            }

            $chatId = $this->chatId;
            $this->setCurrentPage($chatId, $page);

            /**
             * @var KeyActivate[] $activeKeys
             */
            $activeKeys = $this->keyActivateRepository->findAllActiveKeysByUser(
                $this->chatId,
                $this->salesman->id,
                KeyActivate::ACTIVE
            );

            if ($activeKeys->isEmpty()) {
                $keyboard = [
                    'inline_keyboard' => [
                        [['text' => 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', 'callback_data' => 'activate_key']],
                        [['text' => 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö', 'callback_data' => 'inactive_subscriptions']]
                    ]
                ];
                $this->sendMessage("–£–ø—Å‚Ä¶\n
–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å <code>–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á–µ–π</code>, –Ω–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ ‚Äì –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –í–∞—Å –∂–¥–∞—Ç—å! ", $keyboard);
                return;
            }

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            $perPage = 5;
            $totalPages = ceil($activeKeys->count() / $perPage);
            $currentPageKeys = $activeKeys->slice($page * $perPage, $perPage);

            $message = "<blockquote><b>üìä –í–∞—à–∏ VPN-–ø–æ–¥–ø–∏—Å–∫–∏:</b></blockquote>\n\n\n";

            /**
             * @var KeyActivate $key
             */
            foreach ($currentPageKeys as $key) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ñ–∏–∫–µ —Å –ø–∞–Ω–µ–ª–∏
                    $panelStrategy = new PanelStrategy($key->keyActivateUser->serverUser->panel->panel);
                    $info = $panelStrategy->getSubscribeInfo($key->keyActivateUser->serverUser->panel->id, $key->keyActivateUser->serverUser->id);
                } catch (\Exception $e) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    Log::error('Failed to get subscription info for key ' . $key->id . ': ' . $e->getMessage());
                    $info = ['used_traffic' => null];
                }

                $finishDate = date('d.m.Y', $key->finish_at);
                $daysRemaining = ceil(($key->finish_at - time()) / (60 * 60 * 24)); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏

                $message .= "üîë *–ü–æ–¥–ø–∏—Å–∫–∞ <code>{$key->id}</code>*\n";
                $message .= "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {$finishDate}\n";
                $message .= "‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {$daysRemaining} –¥–Ω–µ–π\n";

                if ($key->traffic_limit) {
                    $trafficGB = round($key->traffic_limit / (1024 * 1024 * 1024), 2);
                    $message .= "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {$trafficGB} GB\n";
                }

                if ($info['used_traffic']) {
                    $trafficUsedGB = round($info['used_traffic'] / (1024 * 1024 * 1024), 2);
                    $message .= "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {$trafficUsedGB} GB\n";
                }

                $message .= "üîó [–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é](https://vpn-telegram.com/config/{$key->id})\n\n";
            }

            $message .= "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " . ($page + 1) . " –∏–∑ $totalPages";

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            $keyboard = [
                'inline_keyboard' => []
            ];

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            foreach ($currentPageKeys as $key) {
                $keyboard['inline_keyboard'][] = [
                    ['text' => 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ ' . $key->id, 'callback_data' => 'subscription_details_' . $key->id]
                ];
            }

            // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            $paginationButtons = [];

            if ($page > 0) {
                $paginationButtons[] = ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'status_page_' . ($page - 1)];
                $paginationButtons[] = ['text' => '–í –Ω–∞—á–∞–ª–æ', 'callback_data' => 'status_page_0'];
            }

            if ($page < $totalPages - 1) {
                $paginationButtons[] = ['text' => '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data' => 'status_page_' . ($page + 1)];
            }

            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö"
            $keyboard['inline_keyboard'][] = [
                ['text' => 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö', 'callback_data' => 'inactive_subscriptions']
            ];

            if (!empty($paginationButtons)) {
                $keyboard['inline_keyboard'][] = $paginationButtons;
            }

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }

        } catch (\Exception $e) {
            Log::error('Status action error: ' . $e->getMessage() . ' | User ID: ' . $this->chatId . ' | Page: ' . $page);
            $this->sendErrorMessage();
        }
    }

    protected function actionInactiveSubscriptions(int $page = 0, ?int $messageId = null): void
    {
        try {
            $chatId = $this->chatId;
            $this->setCurrentPage($chatId, $page);

            /**
             * @var KeyActivate[] $inactiveKeys
             */
            $inactiveKeys = $this->keyActivateRepository->findAllActiveKeysByUser(
                $this->chatId,
                $this->salesman->id,
                KeyActivate::EXPIRED
            );

            if ($inactiveKeys->isEmpty()) {
                $this->sendMessage("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.");
                return;
            }

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            $perPage = 5;
            $totalPages = ceil($inactiveKeys->count() / $perPage);
            $currentPageKeys = $inactiveKeys->slice($page * $perPage, $perPage);

            $message = "<blockquote><b>üìã –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ VPN-–ø–æ–¥–ø–∏—Å–∫–∏:</b></blockquote>\n\n\n";

            foreach ($currentPageKeys as $key) {
                $finishDate = date('d.m.Y', $key->finish_at);
                $daysRemaining = ceil(($key->finish_at - time()) / (60 * 60 * 24)); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏

                $message .= "üîë *–ü–æ–¥–ø–∏—Å–∫–∞ <code>{$key->id}</code>*\n";
                $message .= "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {$finishDate}\n";
                $message .= "‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {$daysRemaining} –¥–Ω–µ–π\n";

                if ($key->traffic_limit) {
                    $trafficGB = round($key->traffic_limit / (1024 * 1024 * 1024), 2);
                    $message .= "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {$trafficGB} GB\n";
                }

                $message .= "üîó [–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é](https://vpn-telegram.com/config/{$key->id})\n\n";
            }

            $message .= "–°—Ç—Ä–∞–Ω–∏—Ü–∞ " . ($page + 1) . " –∏–∑ $totalPages";

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            $keyboard = [
                'inline_keyboard' => []
            ];

            // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            $paginationButtons = [];

            if ($page > 0) {
                $paginationButtons[] = ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'inactive_page_' . ($page - 1)];
                $paginationButtons[] = ['text' => '–í –Ω–∞—á–∞–ª–æ', 'callback_data' => 'inactive_page_0'];
            }

            if ($page < $totalPages - 1) {
                $paginationButtons[] = ['text' => '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data' => 'inactive_page_' . ($page + 1)];
            }

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º"
            $keyboard['inline_keyboard'][] = [
                ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º', 'callback_data' => 'status_page_0']
            ];

            if (!empty($paginationButtons)) {
                $keyboard['inline_keyboard'][] = $paginationButtons;
            }

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }

        } catch (\Exception $e) {
            Log::error('Inactive subscriptions action error: ' . $e->getMessage() . ' | User ID: ' . $this->chatId . ' | Page: ' . $page);
            $this->sendErrorMessage();
        }
    }

    protected function showSubscriptionDetails(string $keyId, ?int $messageId = null): void
    {
        try {
            /**
             * @var KeyActivate $key
             */
            $key = $this->keyActivateRepository->findById($keyId);

            if (!$key) {
                $this->sendMessage("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }

            $finishDate = date('d.m.Y', $key->finish_at);
            $daysRemaining = ceil(($key->finish_at - time()) / (60 * 60 * 24)); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏

            $message = "üîë *–ü–æ–¥–ø–∏—Å–∫–∞ <code>{$key->id}</code>*\n";
            $message .= "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {$finishDate}\n";
            $message .= "‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {$daysRemaining} –¥–Ω–µ–π\n";

            if ($key->traffic_limit) {
                $trafficGB = round($key->traffic_limit / (1024 * 1024 * 1024), 2);
                $message .= "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {$trafficGB} GB\n";
            }

            if ($key->traffic_used) {
                $trafficUsedGB = round($key->traffic_used / (1024 * 1024 * 1024), 2);
                $message .= "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {$trafficUsedGB} GB\n";
            }

            $message .= "üîó [–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é](https://vpn-telegram.com/config/{$key->id})\n\n";

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫"
            $keyboard = [
                'inline_keyboard' => [
                    [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫', 'callback_data' => 'status_page_0']]
                ]
            ];

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }

        } catch (\Exception $e) {
            Log::error('Subscription details error: ' . $e->getMessage() . ' | User ID: ' . $this->chatId . ' | Key ID: ' . $keyId);
            $this->sendErrorMessage();
        }
    }

    protected function getCurrentPage(int $chatId): int
    {
        return $this->userPages[$chatId] ?? 0;
    }

    protected function setCurrentPage(int $chatId, int $page): void
    {
        $this->userPages[$chatId] = $page;
    }

    protected function actionHelp(): void
    {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (!empty($this->salesman->custom_help_text)) {
            $this->sendMessage($this->salesman->custom_help_text);
            return;
        }

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
        $text = "<blockquote><b>‚ùì –ü–æ–º–æ—â—å</b></blockquote>\n\n\n";
        $text .= "üîπ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è VPN:</b>\n\n";
        $text .= "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'\n";
        $text .= "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á\n";
        $text .= "3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–∏–∂–µ\n\n";
        $text .= "üîπ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:</b>\n\n";
        $text .= "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìä –°—Ç–∞—Ç—É—Å'\n";
        $text .= "2Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –¥–æ—Å—Ç—É–ø–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n";
        $text .= "üìÅ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:</b>\n\n";
        $text .= "- <a href=\"https://teletype.in/@bott_manager/C0WFg-Bsren\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android</a> ü§ñ\n";
        $text .= "- <a href=\"https://teletype.in/@bott_manager/8jEexiKqjlEWQ\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è IOS</a> üçè\n";
        $text .= "- <a href=\"https://teletype.in/@bott_manager/kJaChoXUqmZ\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows</a> ü™ü\n";
        $text .= "- <a href=\"https://teletype.in/@bott_manager/Q8vOQ-_lnQ_\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è MacOS</a> üíª\n";
        $text .= "- <a href=\"https://teletype.in/@bott_manager/OIc2Dwer6jV\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è AndroidTV</a> üì∫\n\n";
        $text .= "üë®üèª‚Äçüíª –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ <a href=\"—Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a> –±–æ—Ç–∞.\n\n";

        $this->sendMessage($text);
    }

    protected function handleKeyActivation(string $keyId): void
    {
        try {
            $key = $this->keyActivateRepository->findById($keyId);
            $botIdFromToken = explode(':', $key->packSalesman->salesman->token)[0];

            Log::debug('IDSToken: ' . $botIdFromToken . ' | CHAT: ' . $this->telegram->getMe()->id);

            if (!$key) {
                $this->sendMessage("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.");
                return;
            }

            if ($botIdFromToken != $this->telegram->getMe()->id) {
                $this->sendMessage("‚ùå –ö–ª—é—á –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
            if ($key->status != KeyActivate::PAID) {
                $this->sendMessage("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.\n\n–ö–ª—é—á —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if ($key->finish_at && $key->finish_at < time()) {
                $this->sendMessage("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç–µ–∫.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª—é—á
            if ($key->user_tg_id) {
                $this->sendMessage("‚ùå –ö–ª—é—á —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n–ö–∞–∂–¥—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.");
                return;
            }

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            $result = $this->keyActivateService->activate($key, $this->chatId);

            if ($result) {
                $this->sendSuccessActivation($key);
            } else {
                $this->sendMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin");
            }
        } catch (\Exception $e) {
            Log::error('Key activation error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function sendSuccessActivation(KeyActivate $key): void
    {
        $finishDate = date('d.m.Y', $key->finish_at);

        $text = "‚úÖ <b>VPN —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n";
        $text .= "üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {$finishDate}\n\n";

        $text .= "üîó <b>–í–∞—à–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n\n";
        $text .= "[–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é]\n";
        $text .= "https://vpn-telegram.com/config/{$key->id}\n\n";

        $text .= "üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>\n\n";
        $text .= "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VPN-–∫–ª–∏–µ–Ω—Ç –Ω–∞ –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n";
        $text .= "2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã—à–µ\n";
        $text .= "3Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n\n";


        $text .= "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞";
        $text .= "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'ü§ñ Android',
                        'url' => 'https://teletype.in/@bott_manager/C0WFg-Bsren'
                    ]
                ],
                [
                    [
                        'text' => 'üçè iOS',
                        'url' => 'https://teletype.in/@bott_manager/8jEexiKqjlEWQ'
                    ]
                ],
                [
                    [
                        'text' => 'ü™üÔ∏è Windows',
                        'url' => 'https://teletype.in/@bott_manager/kJaChoXUqmZ'
                    ]
                ],
                [
                    [
                        'text' => 'üíª MacOS',
                        'url' => 'https://teletype.in/@bott_manager/Q8vOQ-_lnQ_'
                    ]
                ],
                [
                    [
                        'text' => 'üì∫ AndroidTV',
                        'url' => 'https://teletype.in/@bott_manager/OIc2Dwer6jV'
                    ]
                ]
            ]
        ];

        $this->sendMessage($text, $keyboard);
    }
}
