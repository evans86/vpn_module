<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\KeyActivate\KeyActivate;
use App\Models\Salesman\Salesman;
use Telegram\Bot\Keyboard\Keyboard;
use Illuminate\Support\Facades\Log;

class SalesmanBotController extends AbstractTelegramBot
{
    private ?Salesman $salesman = null;
    private ?KeyActivate $currentPack = null;
    private const STATE_WAITING_KEY = 'waiting_key';
    private ?string $userState = null;

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ update
     */
    protected function processUpdate(): void
    {
        try {
            if ($this->update->getMessage()->getText() === '/start') {
                $this->start();
                return;
            }

            $message = $this->update->getMessage();
            $callbackQuery = $this->update->getCallbackQuery();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            if ($this->userState === self::STATE_WAITING_KEY && $message) {
                $this->handleKeyActivation($message->getText());
                return;
            }

            if ($callbackQuery) {
                $this->processCallback($callbackQuery->getData());
            }
        } catch (\Exception $e) {
            Log::error('Error processing update: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback
     *
     * @param string $data
     */
    private function processCallback(string $data): void
    {
        $params = [];
        if (str_contains($data, '?')) {
            [$action, $queryString] = explode('?', $data);
            parse_str($queryString, $params);
        } else {
            $action = $data;
        }

        $methodName = 'action' . ucfirst($action);
        if (method_exists($this, $methodName)) {
            $this->$methodName($params['id'] ?? null);
        }
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ start
     */
    protected function start(): void
    {
        try {
            $this->generateMenu();
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ú–µ–Ω—é –±–æ—Ç–∞
     */
    protected function generateMenu(): void
    {
        $keyboard = Keyboard::make()
            ->setResizeKeyboard(true)
            ->setOneTimeKeyboard(true)
            ->row(
                Keyboard::inlineButton([
                    'text' => '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                    'callback_data' => 'activate',
                ]),
                Keyboard::inlineButton([
                    'text' => '–°—Ç–∞—Ç—É—Å',
                    'callback_data' => 'status',
                ]),
            )
            ->row(
                Keyboard::inlineButton([
                    'text' => '–ü–æ–º–æ—â—å',
                    'callback_data' => 'support',
                ])
            );

        $this->sendMessage('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', $keyboard);
    }

    /**
     * Support action
     */
    private function actionSupport(): void
    {
        $text = "
            <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN:</b>\n
            1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –º–µ–Ω—é\n
            2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n
            3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n
            \n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @{$this->getSalesmanUsername()}
        ";
        $this->sendMessage($text);
    }

    /**
     * Status action
     */
    private function actionStatus(): void
    {
        try {
            $userId = $this->update->getCallbackQuery()->getFrom()->getId();

            // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            $this->currentPack = $this->keyActivateRepository->findActiveKeyByUserAndSalesman(
                $userId,
                $this->salesman->id
            );

            if (!$this->currentPack) {
                $this->sendMessage("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–¥–æ—Å—Ç—É–ø–æ–≤. –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @{$this->getSalesmanUsername()}");
                return;
            }

            $text = "
                <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º VPN-–¥–æ—Å—Ç—É–ø–µ:</b>\n
                ID –¥–æ—Å—Ç—É–ø–∞: {$this->currentPack->id}\n
                –°—Ç–∞—Ç—É—Å: {$this->currentPack->getStatusText()}\n
                –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {$this->currentPack->created_at->format('d.m.Y')}\n
                –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {$this->currentPack->finish_at->format('d.m.Y')}\n" .
                ($this->currentPack->traffic_limit ? "–û—Å—Ç–∞—Ç–æ–∫ —Ç—Ä–∞—Ñ–∏–∫–∞: " . round($this->currentPack->traffic_limit / 1024 / 1024 / 1024, 2) . " GB" : "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫");

            $this->sendMessage($text);
        } catch (\Exception $e) {
            Log::error('Pack info error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Activate action
     */
    private function actionActivate(): void
    {
        try {
            $userId = $this->update->getCallbackQuery()->getFrom()->getId();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            $existingPack = $this->keyActivateRepository->findActiveKeyByUserAndSalesman(
                $userId,
                $this->salesman->id
            );

            if ($existingPack) {
                $this->sendMessage("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN-–¥–æ—Å—Ç—É–ø –¥–æ {$existingPack->finish_at->format('d.m.Y')}.\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @{$this->getSalesmanUsername()}");
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            $this->userState = self::STATE_WAITING_KEY;
            $this->sendMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:");

        } catch (\Exception $e) {
            Log::error('Activation error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle key activation
     */
    private function handleKeyActivation(string $keyId): void
    {
        try {
            $userId = $this->update->getMessage()->getFrom()->getId();

            // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            $key = $this->keyActivateRepository->findAvailableKeyForActivation(
                $keyId,
                $this->salesman->id
            );

            if (!$key) {
                $this->sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –∫–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @{$this->getSalesmanUsername()}");
                $this->userState = null;
                return;
            }

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $this->keyActivateRepository->update($key, [
                'user_tg_id' => $userId,
                'status' => KeyActivate::ACTIVE
            ]);

            $this->currentPack = $key;
            $this->userState = null;

            $text = "
                <b>üéâ VPN-–¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n
                ID –¥–æ—Å—Ç—É–ø–∞: {$this->currentPack->id}\n
                –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {$this->currentPack->finish_at->format('d.m.Y')}\n" .
                ($this->currentPack->traffic_limit ? "–î–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫: " . round($this->currentPack->traffic_limit / 1024 / 1024 / 1024, 2) . " GB" : "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫") . "\n\n" .
                "–°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.";

            $this->sendMessage($text);
            $this->sendSetupInstructions();
        } catch (\Exception $e) {
            Log::error('Key activation error: ' . $e->getMessage());
            $this->sendErrorMessage();
            $this->userState = null;
        }
    }

    /**
     * VPN instructions
     */
    private function sendSetupInstructions(): void
    {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN
        $configUrl = config('app.url') . '/config/' . $this->currentPack->key;

        $text = "<b>üîê –í–∞—à VPN —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n";
        $text .= "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>\n\n";
        $text .= "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n";
        $text .= "<code>$configUrl</code>\n\n";

        // iOS
        $text .= "üçé <b>iOS:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ App Store\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n";
        $text .= "3. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å'\n\n";

        // Android
        $text .= "ü§ñ <b>Android:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ Google Play\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n";
        $text .= "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n";

        // Windows
        $text .= "üíª <b>Windows:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n";
        $text .= "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n";

        $text .= "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @{$this->getSalesmanUsername()}";

        $this->sendMessage($text);
    }

    /**
     * Salesman username
     * @return string
     */
    private function getSalesmanUsername(): string
    {
        if (!$this->salesman) {
            $this->salesman = $this->salesmanRepository->findByToken($this->telegram->getAccessToken());
        }
        return $this->salesman->username ?? 'support';
    }
}
