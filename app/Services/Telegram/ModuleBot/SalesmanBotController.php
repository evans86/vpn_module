<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\KeyActivate\KeyActivate;
use App\Models\Salesman\Salesman;
use Illuminate\Support\Facades\Log;

class SalesmanBotController extends AbstractTelegramBot
{
    private ?Salesman $salesman;

    public function __construct(string $token)
    {
        parent::__construct($token);

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        $this->salesman = $this->salesmanRepository->findByToken($token);
        if (!$this->salesman) {
            Log::error('Salesman not found for token: ' . substr($token, 0, 10) . '...');
            throw new \RuntimeException('Salesman not found');
        }

        Log::debug('Initialized SalesmanBotController', [
            'salesman_id' => $this->salesman->id,
            'token' => substr($token, 0, 10) . '...'
        ]);
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ update
     */
    public function processUpdate(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
            if (!$this->salesman->bot_active) {
                $this->sendMessage("‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
                return;
            }

            $message = $this->update->getMessage();

            if (!$message || !$message->getText()) {
                return;
            }

            $text = $message->getText();

            if ($text === '/start') {
                $this->start();
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
            switch ($text) {
                case 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å':
                    $this->actionActivate();
                    break;
                case 'üìä –°—Ç–∞—Ç—É—Å':
                    $this->actionStatus();
                    break;
                case '‚ùì –ü–æ–º–æ—â—å':
                    $this->actionHelp();
                    break;
                default:
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª—é—á
                    if ($this->isValidKeyFormat($text)) {
                        $this->handleKeyActivation($text);
                    } else {
                        $this->sendMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
                    }
            }
        } catch (\Exception $e) {
            Log::error('Process update error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function start(): void
    {
        try {
            $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!\n\n";
            $message .= "üî∏ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∞—à VPN –¥–æ—Å—Ç—É–ø\n";
            $message .= "üî∏ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n";
            $message .= "üî∏ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–º–æ—â—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ";

            $this->generateMenu($message);
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function generateMenu($message): void
    {
        $keyboard = [
            'keyboard' => [
                [
                    ['text' => 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å']
                ],
                [
                    ['text' => 'üìä –°—Ç–∞—Ç—É—Å'],
                    ['text' => '‚ùì –ü–æ–º–æ—â—å']
                ]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];

        $this->telegram->sendMessage([
            'chat_id' => $this->chatId,
            'text' => $message,
            'reply_markup' => json_encode($keyboard)
        ]);
    }

    protected function actionActivate(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            $existingKey = $this->keyActivateRepository->findActiveKeyByUserAndSalesman(
                $this->chatId,
                $this->salesman->id
            );

            if ($existingKey) {
                $finishDate = date('d.m.Y', $existingKey->finish_at);
                $this->sendMessage("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN-–¥–æ—Å—Ç—É–ø –¥–æ {$finishDate}.\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin");
                return;
            }

            $this->sendMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:");
        } catch (\Exception $e) {
            Log::error('Activate action error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function actionStatus(): void
    {
        try {
            $activeKey = $this->keyActivateRepository->findActiveKeyByUserAndSalesman(
                $this->chatId,
                $this->salesman->id,
                KeyActivate::ACTIVE
            );

            if (!$activeKey) {
                $this->sendMessage("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–¥–æ—Å—Ç—É–ø–æ–≤.\n\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á.");
                return;
            }

            $finishDate = date('d.m.Y', $activeKey->finish_at);
            $text = "üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º VPN-–¥–æ—Å—Ç—É–ø–µ:*\n\n";
            $text .= "üîë ID –∫–ª—é—á–∞: " . "<code>{$activeKey->id}</code>\n";
            $text .= "üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {$finishDate}\n";

            if ($activeKey->traffic_limit) {
                $trafficGB = round($activeKey->traffic_limit / (1024 * 1024 * 1024), 2);
                $text .= "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {$trafficGB} GB\n";
            }

            $this->sendMessage($text);
        } catch (\Exception $e) {
            Log::error('Status action error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function actionHelp(): void
    {
        $text = "*‚ùì –ü–æ–º–æ—â—å*\n\n";
        $text .= "üîπ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è VPN:*\n";
        $text .= "1. –ù–∞–∂–º–∏—Ç–µ 'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'\n";
        $text .= "2. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á\n";
        $text .= "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n\n";
        $text .= "üîπ *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:*\n";
        $text .= "1. –ù–∞–∂–º–∏—Ç–µ 'üìä –°—Ç–∞—Ç—É—Å'\n";
        $text .= "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –¥–æ—Å—Ç—É–ø–µ\n\n";
        $text .= "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin";

        $this->sendMessage($text);
    }

    protected function handleKeyActivation(string $keyId): void
    {
        try {
            $key = $this->keyActivateRepository->findById($keyId);

            if (!$key) {
                $this->sendMessage("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
            if ($key->status != KeyActivate::PAID) {
                $this->sendMessage("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.\n\n–ö–ª—é—á —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if ($key->finish_at && $key->finish_at < time()) {
                $this->sendMessage("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç–µ–∫.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª—é—á
            if ($key->user_tg_id) {
                $this->sendMessage("‚ùå –ö–ª—é—á —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n–ö–∞–∂–¥—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.");
                return;
            }

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            $result = $this->keyActivateService->activate($key, $this->chatId);

            if ($result) {
                $this->sendSuccessActivation($key);
            } else {
                $this->sendMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin");
            }
        } catch (\Exception $e) {
            Log::error('Key activation error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    protected function sendSuccessActivation(KeyActivate $key): void
    {
        $finishDate = date('d.m.Y', $key->finish_at);

        $text = "‚úÖ VPN —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n";
        $text .= "üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {$finishDate}\n\n";
        $text .= "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:\n";
        $text .= "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify:\n";
        $text .= "Android: https://play.google.com/store/apps/details?id=org.outline.android.client\n";
        $text .= "iOS: https://apps.apple.com/us/app/outline-app/id1356177741\n\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É:\n";
        $text .= "<code>–ù–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª—é—á</code>\n\n";
        $text .= "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @admin";

        $this->sendMessage($text);
    }

    private function isValidKeyFormat(string $text): bool
    {
        return strlen($text) === 36; // –ü—Ä–∏–º–µ—Ä –¥–ª—è UUID
    }
}
