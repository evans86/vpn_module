<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\KeyActivate\KeyActivate;
use App\Models\PackSalesman\PackSalesman;
use App\Models\Salesman\Salesman;
use Telegram\Bot\Keyboard\Keyboard;
use Illuminate\Support\Facades\Log;

class SalesmanBotController extends AbstractTelegramBot
{
    private ?Salesman $salesman = null;
    private ?KeyActivate $currentPack = null;

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ update
     */
    protected function processUpdate(): void
    {
        try {
            if ($this->update->getMessage()->getText() === '/start') {
                $this->start();
                return;
            }

            $callbackQuery = $this->update->getCallbackQuery();

            if ($callbackQuery) {
                $this->processCallback($callbackQuery->getData());
            }
        } catch (\Exception $e) {
            Log::error('Error processing update: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback
     *
     * @param string $data
     */
    private function processCallback(string $data): void
    {
        $params = [];
        if (str_contains($data, '?')) {
            [$action, $queryString] = explode('?', $data);
            parse_str($queryString, $params);
        } else {
            $action = $data;
        }

        $methodName = 'action' . ucfirst($action);
        if (method_exists($this, $methodName)) {
            $this->$methodName($params['id'] ?? null);
        }
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ start
     */
    protected function start(): void
    {
        try {
            $this->generateMenu();
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ú–µ–Ω—é –±–æ—Ç–∞
     */
    protected function generateMenu(): void
    {
        $keyboard = Keyboard::make()
            ->setResizeKeyboard(true)
            ->setOneTimeKeyboard(true)
            ->row([
                Keyboard::inlineButton([
                    'text' => '–ü–æ–º–æ—â—å',
                    'callback_data' => 'support',
                ])
            ])
            ->row([
                Keyboard::inlineButton([
                    'text' => '–°—Ç–∞—Ç—É—Å',
                    'callback_data' => 'status',
                ]),
                Keyboard::inlineButton([
                    'text' => '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø',
                    'callback_data' => 'activate',
                ]),
            ]);

        $this->sendMessage('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN –¥–æ—Å—Ç—É–ø–æ–º', $keyboard);
    }

    /**
     * Support action
     */
    private function actionSupport(): void
    {
        $text = "
            <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN:</b>\n
            1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –º–µ–Ω—é\n
            2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n
            3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n
            \n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @{$this->getSalesmanUsername()}
        ";
        $this->sendMessage($text);
    }

    /**
     * Status action
     */
    private function actionStatus(): void
    {
        try {
            // TODO: –ó–¥–µ—Å—å –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å $this->currentPack = keyActivate

            $text = "
                <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø–∞–∫–µ—Ç–µ:</b>\n
                ID –ø–∞–∫–µ—Ç–∞: {$this->currentPack->id}\n
                –°—Ç–∞—Ç—É—Å: " . ($this->currentPack->status === PackSalesman::PAID ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω') . "\n
                –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {$this->currentPack->created_at->format('d.m.Y')}
            ";

            $this->sendMessage($text);
        } catch (\Exception $e) {
            Log::error('Pack info error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Activate action
     */
    private function actionActivate(): void
    {
        try {
            // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –¥–æ—Å—Ç—É–ø–∞ $this->currentPack = keyActivate

            $text = "
                <b>–î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n
                –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {$this->currentPack->finish_at}\n
            ";

            $this->sendMessage($text);
            $this->sendSetupInstructions();
        } catch (\Exception $e) {
            Log::error('Confirm sale error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * VPN instructions
     */
    private function sendSetupInstructions(): void
    {
        $text = "<b>üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:</b>\n\n";

        // Android
        $text .= "ü§ñ <b>Android:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ...\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n";
        $text .= "3. –ù–∞–∂–º–∏—Ç–µ 'Import'\n\n";

        // iOS
        $text .= "üçé <b>iOS:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ...\n";
        $text .= "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n";
        $text .= "3. –ù–∞–∂–º–∏—Ç–µ 'Add'\n\n";

        // Windows
        $text .= "üíª <b>Windows:</b>\n";
        $text .= "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ...\n";

        $text .= "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É";

        $this->sendMessage($text);
    }

    /**
     * Salesman username
     * @return string
     */
    private function getSalesmanUsername(): string
    {
        if (!$this->salesman) {
            $this->salesman = Salesman::where('token', $this->telegram->getAccessToken())->first();
        }
        return $this->salesman->username ?? 'support';
    }
}
