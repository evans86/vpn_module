<?php

namespace App\Services\Telegram\ModuleBot;

use App\Dto\Salesman\SalesmanFactory;
use App\Models\Pack\Pack;
use App\Models\PackSalesman\PackSalesman;
use App\Models\Salesman\Salesman;
use Telegram\Bot\Api;
use Telegram\Bot\Keyboard\Keyboard;
use Illuminate\Support\Facades\Log;

class FatherBotController extends AbstractTelegramBot
{
    private const STATE_WAITING_TOKEN = 'waiting_token';
    private const STATE_WAITING_PAYMENT = 'waiting_payment';

    private ?string $userState = null;

    public function __construct(string $token)
    {
        parent::__construct($token);
        $this->setWebhook($token, self::BOT_TYPE_FATHER);
    }

    /**
     * Process incoming update and route to appropriate action
     */
    protected function processUpdate(): void
    {
        try {
            if ($this->update->getMessage()->text === '/start') {
                Log::debug('Send message: ' . $this->update->getMessage()->text);
                $this->userState = null;
                $this->start();
                return;
            }

            $message = $this->update->getMessage();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            if ($this->userState === self::STATE_WAITING_TOKEN && $message) {
                $this->handleBotToken($message->text);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
            if ($this->userState === self::STATE_WAITING_PAYMENT && $this->update->callbackQuery) {
                $this->processCallback($this->update->callbackQuery->data);
                return;
            }

            if ($message) {
                $text = $message->text;
                switch ($text) {
                    case 'üõç –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç':
                        $this->showPacksList();
                        break;
                    case 'ü§ñ –ú–æ–π –±–æ—Ç':
                        $this->showBotInfo();
                        break;
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        $this->showProfile();
                        break;
                    case '‚ùì –ü–æ–º–æ—â—å':
                        $this->actionHelp();
                        break;
                }
            }
        } catch (\Exception $e) {
            Log::error('Error processing update: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
     */
    private function showPacksList(): void
    {
        try {
            $packs = Pack::where('active', true)->get();
            if ($packs->isEmpty()) {
                $this->sendMessage('‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤');
                return;
            }

            $message = "üì¶ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:*\n\n";
            $keyboard = Keyboard::make()->inline();

            foreach ($packs as $pack) {
                $message .= "üî∏ *{$pack->name}*\n";
                $message .= "üí∞ –¶–µ–Ω–∞: {$pack->price} —Ä—É–±.\n";
                $message .= "üìù –û–ø–∏—Å–∞–Ω–∏–µ: {$pack->description}\n\n";

                $keyboard->row(
                    Keyboard::inlineButton([
                        'text' => "–ö—É–ø–∏—Ç—å {$pack->name} –∑–∞ {$pack->price} —Ä—É–±.",
                        'callback_data' => "buy?id={$pack->id}"
                    ])
                );
            }

            $this->userState = self::STATE_WAITING_PAYMENT;
            $this->sendMessage($message, $keyboard);
        } catch (\Exception $e) {
            Log::error('Show packs error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    private function showBotInfo(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->firstOrFail();

            if (empty($salesman->token)) {
                $salesman->token = self::STATE_WAITING_TOKEN;
                $salesman->save();

                $this->userState = self::STATE_WAITING_TOKEN;
                $this->sendMessage('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:');
                return;
            }

            $message = "ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–æ—Ç–µ*\n\n";
            $message .= "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: {$salesman->bot_link}\n";
            $message .= "‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n";
            $message .= "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.";

            $this->userState = self::STATE_WAITING_TOKEN;
            $this->sendMessage($message);
        } catch (\Exception $e) {
            Log::error('Show bot info error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
     */
    private function showProfile(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->firstOrFail();
            $activePacks = PackSalesman::where('salesman_id', $salesman->id)
                ->where('active', true)
                ->count();

            $message = "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n";
            if ($salesman->bot_link) {
                $message .= "ü§ñ –í–∞—à –±–æ—Ç: {$salesman->bot_link}\n";
            }
            $message .= "üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {$activePacks}\n";

            $this->sendMessage($message);
        } catch (\Exception $e) {
            Log::error('Show profile error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle bot token from user
     */
    private function handleBotToken(string $token): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->firstOrFail();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
            if (!$this->setWebhook($token, self::BOT_TYPE_SALESMAN)) {
                $this->sendMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return;
            }

            $salesmanDto = SalesmanFactory::fromEntity($salesman);
            $salesmanDto->token = $token;
            $salesmanDto->bot_link = $this->getBotLinkFromToken($token);

            $this->salesmanService->updateToken($salesmanDto);

            $this->userState = null;
            $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: {$salesmanDto->bot_link}");
            $this->generateMenu();
        } catch (\Exception $e) {
            Log::error('Bot token handling error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Process callback queries
     * @param string $data
     */
    private function processCallback(string $data): void
    {
        $params = [];
        if (str_contains($data, '?')) {
            [$action, $queryString] = explode('?', $data);
            parse_str($queryString, $params);
        } else {
            $action = $data;
        }

        $methodName = 'action' . ucfirst($action);
        if (method_exists($this, $methodName)) {
            $this->$methodName($params['id'] ?? null);
        }
    }

    /**
     * Start command handler
     */
    protected function start(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $existingSalesman = Salesman::where('telegram_id', $this->chatId)->first();
            Log::debug('existingSalesman: ' . $this->chatId);
            Log::debug('existingSalesman: ' . $this->username);

            if (!$existingSalesman) {
                $this->salesmanService->create($this->chatId, $this->username == null ? null : $this->firstName);
            }

            $this->generateMenu();
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Generate menu
     */
    protected function generateMenu(): void
    {
        $buttons = [
            [
                'text' => 'üõç –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç'
            ],
            [
                'text' => 'ü§ñ –ú–æ–π –±–æ—Ç'
            ],
            [
                'text' => 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'
            ],
            [
                'text' => '‚ùì –ü–æ–º–æ—â—å'
            ]
        ];

        $message = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞–º–∏ VPN*\n\n";
        $message .= "üî∏ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–∞–∫–µ—Ç—ã –∫–ª—é—á–µ–π\n";
        $message .= "üî∏ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n";
        $message .= "üî∏ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ VPN –¥–æ—Å—Ç—É–ø—ã\n";

        $this->sendMenu($buttons, $message);
    }

    /**
     * Help action
     */
    private function actionHelp(): void
    {
        $message = "‚ùì *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n";
        $message .= "*–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å VPN:*\n\n";
        $message .= "1Ô∏è‚É£ –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –∫–ª—é—á–µ–π\n";
        $message .= "2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ @BotFather\n";
        $message .= "3Ô∏è‚É£ –ü—Ä–∏–≤—è–∂–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n";
        $message .= "4Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã\n\n";
        $message .= "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n";
        $message .= "üì¶ –ü–∞–∫–µ—Ç—ã –º–æ–∂–Ω–æ –¥–æ–∫—É–ø–∞—Ç—å\n";
        $message .= "üîÑ –ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n";
        $message .= "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n";
        $message .= "–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ @support";

        $this->sendMessage($message);
    }

    /**
     * Get bot link from token
     * @param string $token
     * @return string
     */
    private function getBotLinkFromToken(string $token): string
    {
        try {
            $telegram = new Api($token);
            $botInfo = $telegram->getMe();
            return '@' . $botInfo->username;
        } catch (\Exception $e) {
            Log::error('Error getting bot info: ' . $e->getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            $botName = explode(':', $token)[0];
            return '@bot' . $botName;
        }
    }
}
