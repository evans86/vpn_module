<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\Pack\Pack;
use App\Models\PackSalesman\PackSalesman;
use App\Models\Salesman\Salesman;
use App\Services\Key\KeyActivateService;
use Telegram\Bot\Api;
use Telegram\Bot\Keyboard\Keyboard;
use Illuminate\Support\Facades\Log;

class FatherBotController extends AbstractTelegramBot
{
    private const STATE_WAITING_TOKEN = 'waiting_token';
    private const STATE_WAITING_PAYMENT = 'waiting_payment';

    private ?string $userState = null;
    private KeyActivateService $keyActivateService;

    public function __construct(string $token)
    {
        parent::__construct($token);
        $this->setWebhook($token, self::BOT_TYPE_FATHER);
        $this->keyActivateService = app(KeyActivateService::class);
    }

    /**
     * Process incoming update and route to appropriate action
     */
    public function processUpdate(): void
    {
        try {
            $message = $this->update->getMessage();
            $callbackQuery = $this->update->getCallbackQuery();

            if ($message) {
                $text = $message->getText();

                if (!$text) {
                    Log::warning('Received message without text', [
                        'message' => $message
                    ]);
                    return;
                }

                if ($text === '/start') {
                    $this->start();
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                $salesman = Salesman::where('telegram_id', $this->chatId)->first();
                if ($salesman && $salesman->state === self::STATE_WAITING_TOKEN) {
                    $this->handleBotToken($text);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
                switch ($text) {
                    case 'üì¶ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç':
                        $this->showPacksList();
                        break;
                    case 'ü§ñ –ú–æ–π –±–æ—Ç':
                        $this->showBotInfo();
                        break;
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        $this->showProfile();
                        break;
                    case '‚ùì –ü–æ–º–æ—â—å':
                        $this->showHelp();
                        break;
                    default:
                        $this->sendMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
                }
            } elseif ($callbackQuery) {
                $this->processCallback($callbackQuery->getData());
            } else {
                Log::warning('Received update without message or callback_query', [
                    'update' => $this->update
                ]);
            }
        } catch (Exception $e) {
            Log::error('Error processing update in FatherBot', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
     */
    private function showPacksList(): void
    {
        try {
            $packs = Pack::all();
            $message = "<b>üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>\n\n";
            $inlineKeyboard = [];

            foreach ($packs as $pack) {
                $message .= "<b>{$pack->name}</b>\n";
                $message .= "üí∞ –¶–µ–Ω–∞: {$pack->price} —Ä—É–±.\n";
                $message .= "üìù –û–ø–∏—Å–∞–Ω–∏–µ: {$pack->description}\n\n";

                $inlineKeyboard[] = [
                    ['text' => "–ö—É–ø–∏—Ç—å –∑–∞ {$pack->price} —Ä—É–±.", 'callback_data' => json_encode(['action' => 'buy_pack', 'pack_id' => $pack->id])]
                ];
            }

            $keyboard = [
                'inline_keyboard' => $inlineKeyboard
            ];

            $this->sendMessage($message, $keyboard);
        } catch (\Exception $e) {
            Log::error('Show packs error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Process callback queries
     */
    private function processCallback($data): void
    {
        try {
            $params = json_decode($data, true);
            if (!$params || !isset($params['action'])) {
                Log::error('Invalid callback data', [
                    'data' => $data
                ]);
                return;
            }

            switch ($params['action']) {
                case 'buy_pack':
                    if (isset($params['pack_id'])) {
                        $this->buyPack($params['pack_id']);
                    }
                    break;
                case 'confirm_purchase':
                    if (isset($params['pack_id'])) {
                        $this->confirmPurchase($params['pack_id']);
                    }
                    break;
                case 'check_payment':
                    if (isset($params['payment_id'])) {
                        $this->checkPayment($params['payment_id']);
                    }
                    break;
                default:
                    Log::error('Unknown callback action', [
                        'action' => $params['action'],
                        'data' => $data
                    ]);
            }
        } catch (\Exception $e) {
            Log::error('Process callback error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle buy pack action
     */
    private function buyPack(int $packId): void
    {
        try {
            $pack = Pack::findOrFail($packId);

            $message = "üíé *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞*\n\n";
            $message .= "üì¶ –ü–∞–∫–µ—Ç: {$pack->name}\n";
            $message .= "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$pack->price} —Ä—É–±.\n\n";
            $message .= "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:";

            $keyboard = [
                'inline_keyboard' => [
                    [
                        ['text' => "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {$pack->price} —Ä—É–±.", 'callback_data' => json_encode(['action' => 'confirm_purchase', 'pack_id' => $packId])]
                    ]
                ]
            ];

            $this->sendMessage($message, ['reply_markup' => json_encode($keyboard)]);
        } catch (\Exception $e) {
            Log::error('Buy pack error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle confirm purchase action
     */
    private function confirmPurchase(int $packId): void
    {
        try {
            $pack = Pack::findOrFail($packId);

            $message = "üí≥ *–û–ø–ª–∞—Ç–∞ –ø–∞–∫–µ—Ç–∞*\n\n";
            $message .= "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {$pack->price} —Ä—É–±.\n\n";
            $message .= "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n";
            $message .= "üí† –°–±–µ—Ä–±–∞–Ω–∫: `1234 5678 9012 3456`\n";
            $message .= "üí† –¢–∏–Ω—å–∫–æ—Ñ—Ñ: `9876 5432 1098 7654`\n\n";
            $message .= "‚ùóÔ∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: `VPN_{$this->chatId}`\n\n";
            $message .= "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:";

            $keyboard = [
                'inline_keyboard' => [
                    [
                        ['text' => "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", 'callback_data' => json_encode(['action' => 'check_payment', 'payment_id' => $packId])]
                    ]
                ]
            ];

            $this->sendMessage($message, ['reply_markup' => json_encode($keyboard)]);
        } catch (\Exception $e) {
            Log::error('Confirm purchase error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle check payment action
     */
    private function checkPayment(int $paymentId): void
    {
        try {
            $pack = Pack::findOrFail($paymentId);
            $salesman = Salesman::where('telegram_id', $this->chatId)->firstOrFail();

            // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞
            $packSalesman = new PackSalesman();
            $packSalesman->pack_id = $pack->id;
            $packSalesman->salesman_id = $salesman->id;
            $packSalesman->status = PackSalesman::PAID;
            $packSalesman->save();

            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
            $keys = [];
            $finish_at = time() + ($pack->period * 24 * 60 * 60); // –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã
            $deleted_at = $finish_at + (7 * 24 * 60 * 60); // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

            for ($i = 0; $i < $pack->count; $i++) {
                $key = $this->keyActivateService->create(
                    $pack->traffic_limit,
                    $packSalesman->id,
                    $finish_at,
                    $deleted_at
                );
                $keys[] = $key;
            }

            $message = "‚úÖ *–ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!*\n\n";
            $message .= "üì¶ –ü–∞–∫–µ—Ç: {$pack->name}\n";
            $message .= "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$pack->price} —Ä—É–±.\n\n";
            $message .= "üîê *–í–∞—à–∏ –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n";
            foreach ($keys as $index => $key) {
                $message .= ($index + 1) . ". `{$key->id}`\n";
            }
            $message .= "\n‚ùóÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –∫–ª—é—á–∏ - –æ–Ω–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN\n\n";

            if (!$salesman->token) {
                $message .= "‚ùóÔ∏è *–í–∞–∂–Ω–æ:* –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂\n";
                $message .= "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'ü§ñ –ú–æ–π –±–æ—Ç' –≤ –º–µ–Ω—é";
            } else {
                $message .= "ü§ñ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–ª—é—á–µ–π:\n";
                $message .= $salesman->username;
            }

            $this->sendMessage($message);
        } catch (\Exception $e) {
            Log::error('Check payment error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle add bot
     */
    private function handleAddBot(): void
    {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if ($salesman) {
                $salesman->state = self::STATE_WAITING_TOKEN;
                $salesman->save();
            }

            $this->sendMessage("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>\n\n–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @BotFather");
        } catch (\Exception $e) {
            Log::error('Add bot error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle bot token from user
     */
    private function handleBotToken(string $token): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
            $telegram = new Api($token);
            $botInfo = $telegram->getMe();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if ($salesman) {
                $salesman->token = $token;
                $salesman->username = $botInfo->getUsername();
                $salesman->state = null; // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                $salesman->save();

                $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç VPN-–¥–æ—Å—Ç—É–ø–æ–≤.");
                $this->generateMenu();
            }
        } catch (\Exception $e) {
            Log::error('Bot token validation error: ' . $e->getMessage());
            $this->sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if ($salesman) {
                $salesman->state = null;
                $salesman->save();
            }
            
            $this->generateMenu();
        }
    }

    /**
     * Start command handler
     */
    protected function start(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $existingSalesman = Salesman::where('telegram_id', $this->chatId)->first();

            if (!$existingSalesman) {
                $this->salesmanService->create($this->chatId, $this->username == null ? null : $this->firstName);
            }

            $this->generateMenu();
            $message = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞–º–∏ VPN*\n\n";
            $message .= "üî∏ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–∞–∫–µ—Ç—ã –∫–ª—é—á–µ–π\n";
            $message .= "üî∏ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n";
            $message .= "üî∏ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ VPN –¥–æ—Å—Ç—É–ø—ã";
            $this->sendMessage($message);
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
     */
    protected function generateMenu(): void
    {
        $keyboard = new Keyboard();
        $keyboard->addRow('üì¶ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç')
            ->addRow('ü§ñ –ú–æ–π –±–æ—Ç')
            ->addRow('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
            ->addRow('‚ùì –ü–æ–º–æ—â—å');

        $this->telegram->replyKeyboardMarkup([
            'keyboard' => $keyboard->get(),
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ]);
    }

    private function showHelp(): void
    {
        $message = "*‚ùì –ü–æ–º–æ—â—å*\n\n";
        $message .= "üîπ *–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞:*\n";
        $message .= "1. –ù–∞–∂–º–∏—Ç–µ 'üì¶ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç'\n";
        $message .= "2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç\n";
        $message .= "3. –û–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n\n";
        $message .= "üîπ *–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞:*\n";
        $message .= "1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É @BotFather\n";
        $message .= "2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n";
        $message .= "3. –ù–∞–∂–º–∏—Ç–µ 'ü§ñ –ú–æ–π –±–æ—Ç' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω\n\n";
        $message .= "üîπ *–ü—Ä–æ–¥–∞–∂–∞ –¥–æ—Å—Ç—É–ø–æ–≤:*\n";
        $message .= "1. –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –∫–ª—é—á–µ–π\n";
        $message .= "2. –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n";
        $message .= "3. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã —á–µ—Ä–µ–∑ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n\n";
        $message .= "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin";

        $this->sendMessage($message);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    private function showBotInfo(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (empty($salesman->token)) {
                $salesman->state = self::STATE_WAITING_TOKEN;
                $salesman->save();
                
                $this->sendMessage("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>\n\n–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @BotFather");
                return;
            }

            $message = "<b>ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–æ—Ç–µ</b>\n\n";
            $message .= "üîó –í–∞—à –±–æ—Ç: @{$salesman->username}\n";
            $message .= "‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n";
            $message .= "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start";

            $this->sendMessage($message);
            $this->generateMenu();
        } catch (\Exception $e) {
            Log::error('Show bot info error: ' . $e->getMessage());
            $this->sendErrorMessage();
            $this->generateMenu();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
     */
    private function showProfile(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->firstOrFail();
            $activePacks = PackSalesman::where('salesman_id', $salesman->id)
                ->where('status', PackSalesman::PAID)
                ->count();

            $message = "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n";
            if ($salesman->username) {
                $message .= "ü§ñ –í–∞—à –±–æ—Ç: @{$salesman->username}\n";
            }
            $message .= "üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {$activePacks}\n";

            $this->sendMessage($message);
        } catch (\Exception $e) {
            Log::error('Show profile error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–π—Ç–æ–≤ –≤ –≥–∏–≥–∞–±–∞–π—Ç—ã
     */
    private function bytesToGB(int $bytes): float
    {
        return round($bytes / (1024 * 1024 * 1024), 2);
    }
}
