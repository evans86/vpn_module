<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\KeyActivate\KeyActivate;
use App\Models\PackSalesman\PackSalesman;
use App\Models\Salesman\Salesman;
use Exception;
use Telegram\Bot\Api;
use Illuminate\Support\Facades\Log;

class FatherBotController extends AbstractTelegramBot
{
    private const STATE_WAITING_TOKEN = 'waiting_token';

    public function __construct(string $token)
    {
        parent::__construct($token);
        $this->setWebhook($token, self::BOT_TYPE_FATHER);
    }

    /**
     * Process incoming update and route to appropriate action
     */
    public function processUpdate(): void
    {
        try {
            $message = $this->update->getMessage();
            $callbackQuery = $this->update->getCallbackQuery();

            if ($callbackQuery) {
                Log::info('–í—ã–∑–æ–≤ callback query', [
                    'data' => $callbackQuery->getData(),
                    'from' => $callbackQuery->getFrom()->getId()
                ]);
                $this->processCallback($callbackQuery->getData());
                return;
            }

            if ($message) {
                $text = $message->getText();

                if (!$text) {
                    Log::warning('Received message without text', [
                        'message' => $message
                    ]);
                    return;
                }

                if ($text === '/start') {
                    $this->start();
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                $salesman = Salesman::where('telegram_id', $this->chatId)->first();
                if ($salesman && $salesman->state === self::STATE_WAITING_TOKEN) {
                    $this->handleBotToken($text);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
                switch ($text) {
                    case 'ü§ñ –ú–æ–π –±–æ—Ç':
                        $this->showBotInfo();
                        break;
                    case 'üì¶ –ü–∞–∫–µ—Ç—ã':
                        $this->showPacksList();
                        break;
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        $this->showProfile();
                        break;
                    case '‚ùì –ü–æ–º–æ—â—å':
                        $this->showHelp();
                        break;
                    default:
                        $this->sendMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
                }
            }
        } catch (Exception $e) {
            Log::error('Error processing update in FatherBot', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    /**
     * Process callback queries
     */
    private function processCallback($data): void
    {
        try {
            Log::info('Processing callback data', ['data' => $data]);

            $params = json_decode($data, true);
            if (!$params || !isset($params['action'])) {
                Log::error('Invalid callback data', ['data' => $data]);
                return;
            }

            $messageId = $this->update->getCallbackQuery()->getMessage()->getMessageId();

            switch ($params['action']) {
                case 'change_bot':
                    $this->initiateBotChange();
                    break;
                case 'show_pack':
                    if (isset($params['pack_id'])) {
                        $this->showPackDetails($params['pack_id']);
                    }
                    break;
                case 'export_keys':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysToFile($params['pack_id']);
                    }
                    break;
                case 'show_packs':
                    $this->showPacksList();
                    break;
                case 'toggle_bot':
                    $this->toggleBot($messageId);
                    break;
                default:
                    Log::warning('Unknown callback action', [
                        'action' => $params['action'],
                        'data' => $data
                    ]);
            }
        } catch (Exception $e) {
            Log::error('Process callback error: ' . $e->getMessage(), [
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    /**
     * Initiate bot change process
     */
    private function initiateBotChange(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $salesman->state = self::STATE_WAITING_TOKEN;
            $salesman->save();

            $this->sendMessage("<b>üîÑ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞:</b>\n\n–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ @BotFather\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –±–æ—Ç–∞ –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!");
        } catch (Exception $e) {
            Log::error('Initiate bot change error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
     */
    private function showPacksList(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packs = PackSalesman::where('salesman_id', $salesman->id)
                ->where('status', PackSalesman::PAID)
                ->with('pack')
                ->get();

            if ($packs->isEmpty()) {
                $this->sendMessage("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤");
                return;
            }

            $message = "<b>üì¶ –í–∞—à–∏ –ø–∞–∫–µ—Ç—ã –¥–æ—Å—Ç—É–ø–æ–≤:</b>\n\n";
            $keyboard = ['inline_keyboard' => []];

            foreach ($packs as $packSalesman) {
                $pack = $packSalesman->pack;
                $keyboard['inline_keyboard'][] = [
                    [
                        'text' => "üì¶ ID: {$packSalesman->id}",
                        'callback_data' => json_encode([
                            'action' => 'show_pack',
                            'pack_id' => $packSalesman->id
                        ])
                    ]
                ];
            }

            $this->sendMessage($message, $keyboard);
        } catch (\Exception $e) {
            Log::error('Error in showPacksList: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞ –∏ –µ–≥–æ –∫–ª—é—á–∏
     */
    private function showPackDetails(int $packSalesmanId): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }
            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();
            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates;

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ
            $message = "<b>üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:</b>\n\n";
            $message .= "üíæ –¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
            $message .= "‚è± –ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n\n";

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            $message .= "<b>üîë –ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n";
            foreach ($keys as $index => $key) {
                $status = $key->user_tg_id ? "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚ö™Ô∏è –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
                if ($key->user_tg_id) {
                    $message .= ($index + 1) . ". <code>{$key->id}</code> - {$status} (ID: {$key->user_tg_id})\n";
                } else {
                    $message .= ($index + 1) . ". <code>{$key->id}</code> - {$status}\n";
                }
            }

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π –≤ .txt —Ñ–∞–π–ª
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–∏ –≤ .txt —Ñ–∞–π–ª',
                            'callback_data' => json_encode([
                                'action' => 'export_keys',
                                'pack_id' => $packSalesmanId
                            ])
                        ]
                    ]
                ]
            ];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if (strlen($message) <= 4096) {
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                $this->sendMessage($message, $keyboard);
            } else {
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                $this->sendMessage("<b>üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:</b>\n\nüíæ –¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n‚è± –ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n\n");

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ —á–∞—Å—Ç—è–º–∏
                $chunkSize = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                $keyChunks = $keys->chunk($chunkSize);
                $globalIndex = 1; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–∫–≤–æ–∑–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                foreach ($keyChunks as $index => $chunk) {
                    $keyMessage = "<b>üîë –ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—á–∞—Å—Ç—å " . ($index + 1) . "):</b>\n";
                    foreach ($chunk as $key) {
                        $status = $key->user_tg_id ? "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚ö™Ô∏è –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
                        if ($key->user_tg_id) {
                            $keyMessage .= $globalIndex . ". <code>{$key->id}</code> - {$status} (ID: {$key->user_tg_id})\n";
                        } else {
                            $keyMessage .= $globalIndex . ". <code>{$key->id}</code> - {$status}\n";
                        }
                        $globalIndex++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
                    }
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∫–ª—é—á–µ–π
                    $this->sendMessage($keyMessage);
                }
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
                $this->sendMessage("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –≤ .txt —Ñ–∞–π–ª:", $keyboard);
            }
        } catch (\Exception $e) {
            Log::error('Error in showPackDetails: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
     */
    private function exportKeysToFile(int $packSalesmanId): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates;

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
            $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
            $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
            $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
            $content .= "–ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n";

            foreach ($keys as $index => $key) {
                $status = $key->user_tg_id ? "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
//                if ($key->user_tg_id) {
//                    $content .= ($index + 1) . ". {$key->id} - {$status} (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$key->user_tg_id})\n";
//                } else {
                $content .= ($index + 1) . ". {$key->id} - {$status}\n";
//                }
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "keys_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –¥–ª—è –ø–∞–∫–µ—Ç–∞ {$pack->id}"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportKeysToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle bot token from user
     */
    private function handleBotToken(string $token): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
            $telegram = new Api($token);
            $botInfo = $telegram->getMe();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();

            if ($salesman) {
                $salesman->token = $token;
                $salesman->bot_link = 'https://t.me/' . $botInfo->username;
                $salesman->state = null; // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                $salesman->save();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
                $salesmanBot = new Api($token);
                $webhookUrl = rtrim(self::WEBHOOK_BASE_URL, '/') . '/api/telegram/salesman-bot/' . $token . '/init';
                $salesmanBot->setWebhook(['url' => $webhookUrl]);

                $message = "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç VPN-–¥–æ—Å—Ç—É–ø–æ–≤.";
                $this->generateMenu($message);
//                $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç VPN-–¥–æ—Å—Ç—É–ø–æ–≤.");
            }
        } catch (\Exception $e) {
            Log::error('Bot token validation error: ' . $e->getMessage());
            $this->sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if ($salesman) {
                $salesman->state = null;
                $salesman->save();
            }
        }
    }

    /**
     * Start command handler
     */
    protected function start(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $existingSalesman = Salesman::where('telegram_id', $this->chatId)->first();

            if (!$existingSalesman) {
                $this->salesmanService->create($this->chatId, $this->username == null ? null : $this->firstName);
            }

            $message = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞–º–∏ VPN*\n\n";
            $message .= "üî∏ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–∞–∫–µ—Ç—ã –∫–ª—é—á–µ–π\n";
            $message .= "üî∏ –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–æ–≤\n";
            $message .= "üî∏ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ VPN –¥–æ—Å—Ç—É–ø—ã";

            $this->generateMenu($message);
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
     */
    protected function generateMenu($message = null): void
    {
        $keyboard = [
            'keyboard' => [
                [
                    ['text' => 'ü§ñ –ú–æ–π –±–æ—Ç'],
                    ['text' => 'üì¶ –ü–∞–∫–µ—Ç—ã']
                ],
                [
                    ['text' => 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
                    ['text' => '‚ùì –ü–æ–º–æ—â—å']
                ]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];

        if ($message) {
            $this->sendMessage($message, $keyboard);
        } else {
            $this->telegram->sendMessage([
                'chat_id' => $this->chatId,
                'text' => 'üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                'reply_markup' => json_encode($keyboard)
            ]);
        }
    }

    /**
     * @return void
     */
    protected function showHelp(): void
    {
        $message = "*‚ùì –ü–æ–º–æ—â—å*\n\n";
        $message .= "üîπ *–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞:*\n";
        $message .= "1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ @BotFather\n";
        $message .= "2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n";
        $message .= "3. –ù–∞–∂–º–∏—Ç–µ 'ü§ñ –ú–æ–π –±–æ—Ç' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω\n\n";
        $message .= "üîπ *–ü—Ä–æ–¥–∞–∂–∞ –¥–æ—Å—Ç—É–ø–æ–≤:*\n";
        $message .= "1. –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n";
        $message .= "2. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã —á–µ—Ä–µ–∑ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n\n";
//        $message .= "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ @BOTT_SUPPORT_BOT";

        $this->sendMessage($message);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    protected function showBotInfo(?int $messageId = null): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (empty($salesman->token)) {
                $salesman->state = self::STATE_WAITING_TOKEN;
                $salesman->save();

                $this->sendMessage("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>\n\n–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @BotFather");
                return;
            }

            $message = "<b>ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–æ—Ç–µ:</b>\n\n";
            $message .= "üîó –í–∞—à –±–æ—Ç: $salesman->bot_link\n";
            $message .= "‚úÖ –°—Ç–∞—Ç—É—Å: " . ($salesman->bot_active ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω") . "\n\n";

            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => $salesman->bot_active ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞',
                            'callback_data' => json_encode(['action' => 'toggle_bot'])
                        ]
                    ],
                    [
                        [
                            'text' => 'üîÑ –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞',
                            'callback_data' => json_encode(['action' => 'change_bot'])
                        ]
                    ]
                ]
            ];

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }
        } catch (\Exception $e) {
            Log::error('Show bot info error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Toggle bot active status
     */
    private function toggleBot(int $messageId): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $salesman->bot_active = !$salesman->bot_active;
            $salesman->save();

            $this->showBotInfo($messageId);

            $status = $salesman->bot_active ? "–≤–∫–ª—é—á–µ–Ω üü¢" : "–æ—Ç–∫–ª—é—á–µ–Ω üî¥";
//            $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ " . $status);
        } catch (Exception $e) {
            Log::error('Toggle bot error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
     */
    protected function showProfile(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->firstOrFail();
            $activePacks = PackSalesman::where('salesman_id', $salesman->id)
                ->where('status', PackSalesman::PAID)
                ->count();

            $message = "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n";
            $message .= "üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {$activePacks}\n";

            $this->sendMessage($message);
        } catch (\Exception $e) {
            Log::error('Show profile error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }
}
