<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\KeyActivate\KeyActivate;
use App\Models\PackSalesman\PackSalesman;
use App\Models\Salesman\Salesman;
use App\Services\Panel\PanelStrategy;
use DateInterval;
use DateTime;
use Exception;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Str;
use Telegram\Bot\Api;
use Illuminate\Support\Facades\Log;

class FatherBotController extends AbstractTelegramBot
{
    private const STATE_WAITING_TOKEN = 'waiting_token';

    private const STATE_WAITING_HELP_TEXT = 'waiting_help_text';

    public function __construct(string $token)
    {
        parent::__construct($token);
        $this->setWebhook($token, self::BOT_TYPE_FATHER);
    }

    /**
     * Process incoming update and route to appropriate action
     */
    public function processUpdate(): void
    {
        try {
            $message = $this->update->getMessage();
            $callbackQuery = $this->update->getCallbackQuery();

            Log::channel('telegram')->info('Incoming update', [
                'update_id' => $this->update->getUpdateId(),
                'message_text' => $this->update->getMessage()->getText(),
                'chat_id' => $this->chatId
            ]);

            if ($callbackQuery) {
                Log::info('–í—ã–∑–æ–≤ callback query', [
                    'data' => $callbackQuery->getData(),
                    'from' => $callbackQuery->getFrom()->getId()
                ]);
                $this->processCallback($callbackQuery->getData());
                return;
            }

            if ($message) {
                $text = $message->getText();

                if (!$text) {
                    Log::warning('Received message without text', [
                        'message' => $message
                    ]);
                    return;
                }

                if (str_starts_with($text, '/start')) {
                    Log::channel('telegram')->info('Start command received', [
                        'full_text' => $text,
                        'chat_id' => $this->chatId
                    ]);

                    if (str_contains($text, 'auth_')) {
                        $this->handleAuthRequest($text);
                        return;
                    }

                    $this->start();
                    return;
                }

                if ($text === '/start') {
                    $this->start();
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                $salesman = Salesman::where('telegram_id', $this->chatId)->first();

                if ($salesman && $salesman->state === self::STATE_WAITING_TOKEN) {
                    $this->handleBotToken($text);
                    return;
                }

                if ($salesman && $salesman->state === self::STATE_WAITING_HELP_TEXT) {
                    $this->handleHelpTextUpdate($text);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–æ–º VPN
                if ($this->isValidKeyFormat($text)) {
                    $this->handleKeyInfoRequest($text);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
                switch ($text) {
                    case 'ü§ñ –ú–æ–π –±–æ—Ç':
                        $this->showBotInfo();
                        break;
                    case 'üì¶ –ü–∞–∫–µ—Ç—ã':
                        $this->showPacksList();
                        break;
                    case 'ü™™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
                        $this->showProfile();
                        break;
//                    case 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è':
//                        $this->initiateAuth();
//                        break;
                    case 'üåé –ü–æ–º–æ—â—å':
                        $this->showHelp();
                        break;
                    case '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "‚ùì –ü–æ–º–æ—â—å"':
                        $this->initiateHelpTextChange();
                        break;
                    case 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç "‚ùì –ü–æ–º–æ—â—å"':
                        $this->resetHelpText();
                        break;
                    default:
                        $this->sendMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
                }
            }
        } catch (Exception $e) {
            Log::error('Error processing update in FatherBot', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    /**
     * Process callback queries
     */
    private function processCallback($data): void
    {
        try {
            Log::info('Processing callback data', ['data' => $data]);
            $params = json_decode($data, true);
            if (!$params || !isset($params['action'])) {
                Log::error('Invalid callback data', ['data' => $data]);
                return;
            }

            $messageId = $this->update->getCallbackQuery()->getMessage()->getMessageId();

            switch ($params['action']) {
                case 'change_bot':
                    $this->initiateBotChange();
                    break;
                case 'show_pack':
                    if (isset($params['pack_id'])) {
                        $this->showPackDetails($params['pack_id']);
                    }
                    break;
                case 'export_keys':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysToFile($params['pack_id']);
                    }
                    break;
                case 'export_keys_only':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysOnlyToFile($params['pack_id']);
                    }
                    break;
                case 'export_unactivated_keys':
                    if (isset($params['pack_id'])) {
                        $this->exportUnactivatedKeysToFile($params['pack_id']);
                    }
                    break;
                case 'export_unactivated_keys_only':
                    if (isset($params['pack_id'])) {
                        $this->exportUnactivatedKeysOnlyToFile($params['pack_id']);
                    }
                    break;
                case 'export_keys_with_traffic':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysWithTrafficToFile($params['pack_id']);
                    }
                    break;
                case 'export_keys_with_traffic_only':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysWithTrafficOnlyToFile($params['pack_id']);
                    }
                    break;
                case 'export_used_keys':
                    if (isset($params['pack_id'])) {
                        $this->exportUsedKeysToFile($params['pack_id']);
                    }
                    break;
                case 'export_used_keys_only':
                    if (isset($params['pack_id'])) {
                        $this->exportUsedKeysOnlyToFile($params['pack_id']);
                    }
                    break;
                case 'show_packs':
                    $page = $params['page'] ?? 1;
                    $this->showPacksList($page, $messageId);
                    break;
                case 'packs_page':
                    if (isset($params['page'])) {
                        $this->showPacksList($params['page'], $messageId);
                    }
                    break;
                case 'toggle_bot':
                    $this->toggleBot($messageId);
                    break;
                case 'reload_bot':
                    $this->reloadBot();
                    break;

                case 'current_page':
                    // –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    $this->answerCallbackQuery('–í—ã —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
                    break;

//                case 'export_all_keys_menu':
//                    $this->exportAllKeysMenu();
//                    break;
//                case 'export_all_keys':
//                    $this->exportAllKeys();
//                    break;
//                case 'export_all_keys_only':
//                    $this->exportAllKeys(false);
//                    break;
//                case 'export_all_active_keys':
//                    $this->exportAllActiveKeys();
//                    break;
//                case 'export_all_active_keys_only':
//                    $this->exportAllActiveKeys(false);
//                    break;
//                case 'export_all_used_keys':
//                    $this->exportAllUsedKeys();
//                    break;
//                case 'export_all_used_keys_only':
//                    $this->exportAllUsedKeys(false);
//                    break;

                default:
                    Log::warning('Unknown callback action', [
                        'action' => $params['action'],
                        'data' => $data
                    ]);
            }
            // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "loading"
            $this->answerCallbackQuery();

        } catch (Exception $e) {
            Log::error('Process callback error: ' . $e->getMessage(), [
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    /**
     * –û—Ç–≤–µ—Ç –Ω–∞ callback query (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "loading" —Å–æ—Å—Ç–æ—è–Ω–∏—è)
     */
    private function answerCallbackQuery(string $text = '', bool $showAlert = false): void
    {
        try {
            $callbackQueryId = $this->update->getCallbackQuery()->getId();
            $this->telegram->answerCallbackQuery([
                'callback_query_id' => $callbackQueryId,
                'text' => $text,
                'show_alert' => $showAlert
            ]);
        } catch (\Exception $e) {
            Log::error('Error answering callback query: ' . $e->getMessage());
        }
    }

    /**
     *
     * @return void
     */
    protected function initiateAuth(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();

            if (!$salesman) {
                $salesman = $this->salesmanService->create($this->chatId, $this->username ?? $this->firstName);
                $this->sendMessage("üëã –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü");
            }

            $botDeepLink = $this->generateAuthUrl();
            $hash = explode('auth_', $botDeepLink)[1];

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–¥–µ—Ç –∏–∑ –±–æ—Ç–∞
            Cache::put("telegram_auth:{$hash}", [
                'user_id' => $this->chatId,
                'callback_url' => config('app.url') . '/personal/auth/telegram/callback',
                'source' => 'bot' // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            ], now()->addMinutes(5));

            $message = "üîê –î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:\n";
            $message .= "1. –û—Ç–∫—Ä–æ–µ—Ç—Å—è Telegram\n";
            $message .= "2. –ù–∞–∂–º–∏—Ç–µ 'Start' –≤ –±–æ—Ç–µ\n";
            $message .= "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥\n";

            $this->sendMessage($message, [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üîë –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                            'url' => $botDeepLink
                        ]
                    ]
                ]
            ]);

        } catch (\Exception $e) {
            Log::error('Auth initiation failed: ' . $e->getMessage());
            $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞");
        }
    }

    /**
     * @return string
     * @throws Exception
     */
    public function generateAuthUrl(): string
    {
        $botUsername = ltrim(env('TELEGRAM_FATHER_BOT_NAME'), '@');
        if (empty($botUsername)) {
            throw new \Exception('Bot username not configured');
        }

        $hash = bin2hex(random_bytes(16));
        Cache::put("telegram_auth:{$hash}", [
            'user_id' => $this->chatId,
            'callback_url' => config('app.url') . '/personal/auth/telegram/callback'
        ], now()->addMinutes(5));

        return "https://t.me/{$botUsername}?start=auth_{$hash}";
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     *
     * @param string $commandText
     * @return void
     */
    private function handleAuthRequest(string $commandText): void
    {
        try {
            $hash = explode('auth_', $commandText)[1] ?? null;
            if (!$hash) {
                throw new \Exception('Invalid auth command format');
            }

            $authData = Cache::get("telegram_auth:{$hash}");
            if (!$authData) {
                throw new \Exception('Auth session expired or invalid');
            }

            // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä redirect=profile
            $confirmationUrl = $authData['callback_url'] . '?' . http_build_query([
                    'hash' => $hash,
                    'user' => $authData['user_id'],
                    'redirect' => 'profile' // –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å
                ]);

            $this->sendMessage(
                "‚úÖ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
                [
                    'inline_keyboard' => [
                        [
                            [
                                'text' => '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥',
                                'url' => $confirmationUrl
                            ]
                        ]
                    ]
                ]
            );

        } catch (\Exception $e) {
            Log::error('Auth processing failed: ' . $e->getMessage());
            $this->sendMessage("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " . $e->getMessage());
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     *
     * @param array $data
     * @return array|null
     */
    public function validateAuth(array $data): ?array
    {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        $requiredFields = ['id', 'auth_date', 'hash'];
        foreach ($requiredFields as $field) {
            if (empty($data[$field])) {
                Log::warning('Missing required field in Telegram auth data', ['field' => $field]);
                return null;
            }
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
        $authDate = (int)$data['auth_date'];
        if (time() - $authDate > 86400) { // 24 —á–∞—Å–∞
            Log::warning('Expired Telegram auth data', ['auth_date' => $authDate]);
            return null;
        }

        // 3. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ö—ç—à–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if (!$this->verifyTelegramHash($data)) {
            Log::warning('Invalid Telegram hash verification');
            return null;
        }

        // 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return [
            'id' => (int)$data['id'],
            'first_name' => $data['first_name'] ?? '',
            'last_name' => $data['last_name'] ?? null,
            'username' => $data['username'] ?? null,
            'photo_url' => $data['photo_url'] ?? null,
            'auth_date' => $authDate
        ];
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ
     */
    protected function handleKeyInfoRequest(string $keyId): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            // –ò—â–µ–º –∫–ª—é—á —Å—Ä–µ–¥–∏ –∫–ª—é—á–µ–π —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
            /**
             * @var KeyActivate|null $key
             */
            $key = KeyActivate::where('id', $keyId)
                ->whereHas('packSalesman', function ($query) use ($salesman) {
                    $query->where('salesman_id', $salesman->id);
                })
                ->with(['packSalesman.pack', 'keyActivateUser.serverUser.panel'])
                ->first();

            if (!$key) {
                $this->sendMessage("‚ùå –ö–ª—é—á <code>{$keyId}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π");
                return;
            }

            $message = "üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ:</b> <code>{$keyId}</code>\n\n";

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            $message .= "üì¶ <b>–ü–∞–∫–µ—Ç:</b> ";
            if ($key->packSalesman && $key->packSalesman->pack) {
                $message .= "# {$key->packSalesman->id} | ";
                $message .= "–ü–µ—Ä–∏–æ–¥: {$key->packSalesman->pack->period} –¥–Ω–µ–π\n";
            } else {
                $message .= "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞–∫–µ—Ç —É–¥–∞–ª–µ–Ω)\n";
            }

            // –°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
            $status = "‚ö™Ô∏è –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
            if ($key->user_tg_id) {
                $status = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (ID: {$key->user_tg_id})";
            } elseif ($key->status == KeyActivate::EXPIRED) {
                $status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω";
            }
            $message .= "üìä <b>–°—Ç–∞—Ç—É—Å:</b> {$status}\n";

            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ñ–∏–∫–µ —Å –ø–∞–Ω–µ–ª–∏
                $panelStrategy = new PanelStrategy($key->keyActivateUser->serverUser->panel->panel);
                $info = $panelStrategy->getSubscribeInfo($key->keyActivateUser->serverUser->panel->id, $key->keyActivateUser->serverUser->id);
            } catch (\Exception $e) {
                Log::error('Failed to get subscription info for key ' . $key->id . ': ' . $e->getMessage());
                $info = ['used_traffic' => null];
            }

            // –î–∞—Ç—ã
            if ($key->created_at && !is_null($key->created_at)) {
                $message .= "üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> " . $key->created_at->format('d.m.Y H:i') . "\n";
            }

//            if ($key->deleted_at && !is_null($key->deleted_at)) {
//                $message .= "‚úÖ <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ:</b> " . date('d.m.Y', $key->deleted_at) . "\n";
//            }

            if ($key->finish_at && !is_null($key->finish_at)) {
                $message .= "‚è≥ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> " . date('d.m.Y', $key->finish_at) . "\n";
                $message .= "‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> " . ceil(($key->finish_at - time()) / (60 * 60 * 24)) . "\n";
            }

            // –¢—Ä–∞—Ñ–∏–∫
            if ($key->traffic_limit) {
                $trafficGB = number_format($key->traffic_limit / (1024 * 1024 * 1024), 2);
                $trafficUsedGB = round($info['used_traffic'] / (1024 * 1024 * 1024), 2);

                $message .= "üì∂ <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n";
                $message .= "   ‚Ä¢ –õ–∏–º–∏—Ç: {$trafficGB} GB\n";
                $message .= "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {$trafficUsedGB} GB\n";
            }

            $this->sendMessage($message);

        } catch (Exception $e) {
            Log::error('Key info request error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
     */
    protected function initiateHelpTextChange(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $salesman->state = self::STATE_WAITING_HELP_TEXT;
            $salesman->save();

            $message = "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '‚ùì –ü–æ–º–æ—â—å' –≤ –≤–∞—à–µ–º –±–æ—Ç–µ:</b>\n\n";
            $message .= "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É\n";
            $message .= "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤\n";
            $message .= "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã";

            $this->sendMessage($message);
        } catch (Exception $e) {
            Log::error('Initiate help text change error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
     */
    protected function handleHelpTextUpdate(string $text): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (strtolower($text) === '/cancel') {
                $salesman->state = null;
                $salesman->save();
                $this->sendMessage("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ");
                return;
            }

            if (strlen($text) > 4000) {
                $this->sendMessage("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)");
                return;
            }

            $salesman->custom_help_text = $text;
            $salesman->state = null;
            $salesman->save();

            $this->sendMessage("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n" . $text);
        } catch (Exception $e) {
            Log::error('Help text update error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É
     */
    protected function resetHelpText(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $salesman->custom_help_text = null;
            $salesman->save();

            $this->sendMessage("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É");
        } catch (Exception $e) {
            Log::error('Reset help text error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Initiate bot change process
     */
    private function initiateBotChange(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $salesman->state = self::STATE_WAITING_TOKEN;
            $salesman->save();

            $message = "<i><b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b></i>\n\n";
            $message .= "üîë <i><b>–ö–∞–∫ –≤—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω?</b></i>\n\n";
            $message .= "1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ @BotFather –∏ –Ω–∞–∂–∏–º–∞–µ–º start/–Ω–∞—á–∞—Ç—å\n\n";
            $message .= "2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /newbot\n\n";
            $message .= "3Ô∏è‚É£ –í–≤–æ–¥–∏–º –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞. –ü–æ—Ç–æ–º –≤–≤–æ–¥–∏–º –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å–ª–∏—Ç–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–æ–≤–æ _bot\n\n";
            $message .= "4Ô∏è‚É£ –ü—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –ø–æ—Å–ª–µ API –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—à —Ç–æ–∫–µ–Ω.\n\n";

            $this->sendMessage($message);
        } catch (Exception $e) {
            Log::error('Initiate bot change error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

//    /**
//     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
//     */
//    private function showPacksList(int $page = 1, ?int $messageId = null): void
//    {
//        try {
//            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
//            if (!$salesman) {
//                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
//                return;
//            }
//
//            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
//            $perPage = 10;
//
//            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
//            $packs = PackSalesman::where('salesman_id', $salesman->id)
//                ->where('status', PackSalesman::PAID)
//                ->with('pack')
//                ->orderBy('created_at', 'desc')
//                ->paginate($perPage, ['*'], 'page', $page);
//
//            if ($packs->isEmpty()) {
//                $this->sendMessage("‚ùå –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å <b>–Ω–µ—Ç</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö <b>–ø–∞–∫–µ—Ç–æ–≤</b>, —É—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç –∫–ª—é—á–µ–π –∏ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!");
//                return;
//            }
//
//            $message = "<blockquote><b>üì¶ –ü–∞–∫–µ—Ç—ã –∫–ª—é—á–µ–π:</b></blockquote>\n\n";
//            $message .= "<b>‚úÖ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –±–æ—Ç—É.</b>\n\n";
//            $keyboard = ['inline_keyboard' => []];
//
//            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
//            foreach ($packs as $packSalesman) {
//                $pack = $packSalesman->pack;
//
//                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç
//                if ($pack) {
////                    $date = new DateTime($packSalesman->created_at);
////                    $date->add(new DateInterval("PT{$pack->activate_time}S"));
////                    $formattedDate = $date->format('d.m.Y');
//                    $traffic = number_format($pack->traffic_limit / (1024 * 1024 * 1024));
//
//                    $text = "üì¶{$traffic}GB| –ü–µ—Ä–∏–æ–¥: {$pack->period}–¥";
//
////                    $text = "üì¶ –¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB|";
////                    $text .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π|";
////                    $text .= "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ: {$formattedDate}";
//                } else {
//                    $text = "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω";
//                }
//
//                $keyboard['inline_keyboard'][] = [
//                    [
//                        'text' => $text,
//                        'callback_data' => json_encode([
//                            'action' => 'show_pack',
//                            'pack_id' => $packSalesman->id
//                        ])
//                    ]
//                ];
//            }
//
//            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
//            if ($packs->hasPages()) {
//                $paginationButtons = [];
//
//                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
//                if ($packs->currentPage() > 1) {
//                    $paginationButtons[] = [
//                        'text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
//                        'callback_data' => json_encode([
//                            'action' => 'packs_page',
//                            'page' => $packs->currentPage() - 1
//                        ])
//                    ];
//                }
//
//                // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
//                if ($packs->hasMorePages()) {
//                    $paginationButtons[] = [
//                        'text' => '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
//                        'callback_data' => json_encode([
//                            'action' => 'packs_page',
//                            'page' => $packs->currentPage() + 1
//                        ])
//                    ];
//                }
//
//                $keyboard['inline_keyboard'][] = $paginationButtons;
//            }
//
//            if ($messageId) {
//                $this->editMessage($message, $keyboard, $messageId);
//            } else {
//                $this->sendMessage($message, $keyboard);
//            }
//        } catch (\Exception $e) {
//            Log::error('Error in showPacksList: ' . $e->getMessage());
//            $this->sendErrorMessage();
//        }
//    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
     */
    private function showPacksList(int $page = 1, ?int $messageId = null): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            $perPage = 8;

            // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–∞–∫–µ—Ç—ã –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            $allPacks = PackSalesman::where('salesman_id', $salesman->id)
                ->where('status', PackSalesman::PAID)
                ->with('keyActivates')
                ->get();

            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –í–°–ï–ú –ø–∞–∫–µ—Ç–∞–º
            $totalKeys = 0;
            $activeKeys = 0;
            $usedKeys = 0;

            foreach ($allPacks as $packSalesman) {
                $totalKeys += $packSalesman->keyActivates->count();
                $usedKeys += $packSalesman->keyActivates->whereNotNull('user_tg_id')->count();
            }
            $activeKeys = $totalKeys - $usedKeys;

            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            $packs = PackSalesman::where('salesman_id', $salesman->id)
                ->where('status', PackSalesman::PAID)
                ->with(['pack', 'keyActivates'])
                ->orderBy('created_at', 'desc')
                ->paginate($perPage, ['*'], 'page', $page);

            if ($packs->isEmpty()) {
                $message = "üì¶ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤</b>\n\n";
                $message .= "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å VPN:\n\n";
                $message .= "1Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Å–∏—Å—Ç–µ–º–µ\n";
                $message .= "2Ô∏è‚É£ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–∞–∫–µ—Ç—ã VPN-–∫–ª—é—á–µ–π\n";
                $message .= "3Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –∫–ª–∏–µ–Ω—Ç–∞–º\n\n";
                $message .= "‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —É–∂–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!";

                $this->sendMessage($message);
                return;
            }

            $message = "üìä <b>–í–∞—à–∏ –ø–∞–∫–µ—Ç—ã VPN-–∫–ª—é—á–µ–π</b>\n\n";
            $message .= "üìà <i>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</i>\n";
            $message .= "   ‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: <b>{$totalKeys}</b>\n";
            $message .= "   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{$activeKeys}</b>\n";
            $message .= "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{$usedKeys}</b>\n\n";

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            $currentPage = $packs->currentPage();
            $lastPage = $packs->lastPage();
            $totalPacks = $packs->total();

            $message .= "üì¶ <i>–ü–∞–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {$currentPage}/{$lastPage} (–≤—Å–µ–≥–æ: {$totalPacks}):</i>\n\n";

            $keyboard = ['inline_keyboard' => []];

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
            foreach ($packs as $packSalesman) {
                $pack = $packSalesman->pack;

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º –≤ —ç—Ç–æ–º –ø–∞–∫–µ—Ç–µ
                $totalPackKeys = $packSalesman->keyActivates->count();
                $usedPackKeys = $packSalesman->keyActivates->whereNotNull('user_tg_id')->count();
                $activePackKeys = $totalPackKeys - $usedPackKeys;

                // –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                $usagePercent = $totalPackKeys > 0 ? round(($usedPackKeys / $totalPackKeys) * 100) : 0;

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                $progressBar = $this->createProgressBar($usagePercent);

                if ($pack) {
                    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
//                    $trafficGB = number_format($pack->traffic_limit / (1024 * 1024 * 1024));
                    $period = $pack->period;

                    $buttonText = "üì¶ {$period}–¥ |\n";
                    $buttonText .= "{$progressBar} {$usagePercent}% |\n";
                    $buttonText .= "üîë {$activePackKeys}/{$totalPackKeys}";
                } else {
                    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç —É–¥–∞–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    $buttonText = "üì¶ #–ê—Ä—Ö–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç |\n";
                    $buttonText .= "{$progressBar} {$usagePercent}% |\n";
                    $buttonText .= "üîë {$activePackKeys}/{$totalPackKeys}\n";
                }

                $keyboard['inline_keyboard'][] = [
                    [
                        'text' => $buttonText,
                        'callback_data' => json_encode([
                            'action' => 'show_pack',
                            'pack_id' => $packSalesman->id
                        ])
                    ]
                ];
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
            if ($packs->hasPages()) {
                $paginationButtons = [];

                // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                $currentPage = $packs->currentPage();
                $lastPage = $packs->lastPage();

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                $pageInfo = "üìÑ {$currentPage}/{$lastPage}";

                // –ö–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if ($currentPage > 1) {
                    $paginationButtons[] = [
                        'text' => '‚èÆ',
                        'callback_data' => json_encode([
                            'action' => 'packs_page',
                            'page' => 1
                        ])
                    ];
                }

                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                if ($currentPage > 1) {
                    $paginationButtons[] = [
                        'text' => '‚¨ÖÔ∏è',
                        'callback_data' => json_encode([
                            'action' => 'packs_page',
                            'page' => $currentPage - 1
                        ])
                    ];
                }

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                $paginationButtons[] = [
                    'text' => $pageInfo,
                    'callback_data' => json_encode(['action' => 'current_page'])
                ];

                // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
                if ($packs->hasMorePages()) {
                    $paginationButtons[] = [
                        'text' => '‚û°Ô∏è',
                        'callback_data' => json_encode([
                            'action' => 'packs_page',
                            'page' => $currentPage + 1
                        ])
                    ];
                }

                // –ö–Ω–æ–ø–∫–∞ "–í –∫–æ–Ω–µ—Ü" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if ($currentPage < $lastPage) {
                    $paginationButtons[] = [
                        'text' => '‚è≠',
                        'callback_data' => json_encode([
                            'action' => 'packs_page',
                            'page' => $lastPage
                        ])
                    ];
                }

                $keyboard['inline_keyboard'][] = $paginationButtons;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
//            $keyboard['inline_keyboard'][] = [
//                [
//                    'text' => 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
//                    'callback_data' => json_encode([
//                        'action' => 'show_packs',
//                        'page' => $page,
//                        'ts' => time()
//                    ])
//                ]
//            ];

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }
        } catch (\Exception $e) {
            Log::error('Error in showPacksList: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

//    /**
//     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
//     */
//    private function showPacksList(int $page = 1, ?int $messageId = null): void
//    {
//        try {
//            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
//            if (!$salesman) {
//                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
//                return;
//            }
//
//            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
//            $perPage = 8;
//
////            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
////            $packs = PackSalesman::where('salesman_id', $salesman->id)
////                ->where('status', PackSalesman::PAID)
////                ->with(['pack', 'keyActivates'])
////                ->orderBy('created_at', 'desc')
////                ->paginate($perPage, ['*'], 'page', $page);
//
//            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
//            $packs = PackSalesman::where('salesman_id', $salesman->id)
//                ->where('status', PackSalesman::PAID)
//                ->with('pack')
//                ->orderBy('created_at', 'desc')
//                ->paginate($perPage, ['*'], 'page', $page);
//
//            if ($packs->isEmpty()) {
//                $message = "üì¶ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤</b>\n\n";
//                $message .= "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å VPN:\n\n";
//                $message .= "1Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Å–∏—Å—Ç–µ–º–µ\n";
//                $message .= "2Ô∏è‚É£ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–∞–∫–µ—Ç—ã VPN-–∫–ª—é—á–µ–π\n";
//                $message .= "3Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –∫–ª–∏–µ–Ω—Ç–∞–º\n\n";
//                $message .= "‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —É–∂–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!";
//
//                $this->sendMessage($message);
//                return;
//            }
//
//            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
//            $totalKeys = 0;
//            $activeKeys = 0;
//            $usedKeys = 0;
//
//            foreach ($packs as $packSalesman) {
//                $totalKeys += $packSalesman->keyActivates->count();
//                $usedKeys += $packSalesman->keyActivates->whereNotNull('user_tg_id')->count();
//            }
//            $activeKeys = $totalKeys - $usedKeys;
//
//            $message = "üìä <b>–í–∞—à–∏ –ø–∞–∫–µ—Ç—ã VPN-–∫–ª—é—á–µ–π</b>\n\n";
//            $message .= "üìà <i>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</i>\n";
//            $message .= "   ‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: <b>{$totalKeys}</b>\n";
//            $message .= "   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{$activeKeys}</b>\n";
//            $message .= "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{$usedKeys}</b>\n\n";
//            $message .= "üîç <i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:</i>\n\n";
//
//            $keyboard = ['inline_keyboard' => []];
//
//            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
//            foreach ($packs as $packSalesman) {
//                $pack = $packSalesman->pack;
//
//                if (!$pack) {
//                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø–∞–∫–µ—Ç —É–¥–∞–ª–µ–Ω
//                }
//
//                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º –≤ —ç—Ç–æ–º –ø–∞–∫–µ—Ç–µ
//                $totalPackKeys = $packSalesman->keyActivates->count();
//                $usedPackKeys = $packSalesman->keyActivates->whereNotNull('user_tg_id')->count();
//                $activePackKeys = $totalPackKeys - $usedPackKeys;
//
//                // –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
//                $usagePercent = $totalPackKeys > 0 ? round(($usedPackKeys / $totalPackKeys) * 100) : 0;
//
//                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫
//                $period = $pack->period;
//
//                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
//                $progressBar = $this->createProgressBar($usagePercent);
//
//                // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
//                $buttonText = "üì¶ {$period}–¥\n";
//                $buttonText = "{$progressBar} {$usagePercent}%\n";
//                $buttonText .= "üîë {$activePackKeys}/{$totalPackKeys}";
//
//                $keyboard['inline_keyboard'][] = [
//                    [
//                        'text' => $buttonText,
//                        'callback_data' => json_encode([
//                            'action' => 'show_pack',
//                            'pack_id' => $packSalesman->id
//                        ])
//                    ]
//                ];
//            }
//
////            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
////            $keyboard['inline_keyboard'][] = [
////                [
////                    'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏',
////                    'callback_data' => json_encode([
////                        'action' => 'export_all_keys_menu'
////                    ])
////                ]
////            ];
//
//            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
//            if ($packs->hasPages()) {
//                $paginationButtons = [];
//
//                // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//                $currentPage = $packs->currentPage();
//                $lastPage = $packs->lastPage();
//
//                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//                $pageInfo = "üìÑ {$currentPage}/{$lastPage}";
//
//                if ($currentPage > 1) {
//                    $paginationButtons[] = [
//                        'text' => '‚¨ÖÔ∏è',
//                        'callback_data' => json_encode([
//                            'action' => 'packs_page',
//                            'page' => $currentPage - 1
//                        ])
//                    ];
//                }
//
//                $paginationButtons[] = [
//                    'text' => $pageInfo,
//                    'callback_data' => json_encode(['action' => 'current_page'])
//                ];
//
//                if ($packs->hasMorePages()) {
//                    $paginationButtons[] = [
//                        'text' => '‚û°Ô∏è',
//                        'callback_data' => json_encode([
//                            'action' => 'packs_page',
//                            'page' => $currentPage + 1
//                        ])
//                    ];
//                }
//
//                $keyboard['inline_keyboard'][] = $paginationButtons;
//            }
//
//            if ($messageId) {
//                $this->editMessage($message, $keyboard, $messageId);
//            } else {
//                $this->sendMessage($message, $keyboard);
//            }
//        } catch (\Exception $e) {
//            Log::error('Error in showPacksList: ' . $e->getMessage());
//            $this->sendErrorMessage();
//        }
//    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
     */
    private function createProgressBar(int $percent): string
    {
        $filled = round($percent / 10);
        $empty = 10 - $filled;

        $bar = '';
        for ($i = 0; $i < $filled; $i++) {
            $bar .= '‚ñà';
        }
        for ($i = 0; $i < $empty; $i++) {
            $bar .= '‚ñë';
        }

        return $bar;
    }

//    /**
//     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞ –∏ –µ–≥–æ –∫–ª—é—á–∏
//     */
//    private function showPackDetails(int $packSalesmanId): void
//    {
//        try {
//            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
//            if (!$salesman) {
//                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
//                return;
//            }
//
//            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
//                ->where('id', $packSalesmanId)
//                ->where('salesman_id', $salesman->id)
//                ->firstOrFail();
//
//            $pack = $packSalesman->pack;
//            $keys = $packSalesman->keyActivates;
//
//            // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//            $message = "<b>üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:</b>\n\n";
//
//            if ($pack) {
//                $message .= "üíæ –¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
//                $message .= "‚è± –ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n\n";
//            } else {
//                $message .= "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω\n\n";
//            }
//
//            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
//            $message .= "<b>üîë –ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n";
//            foreach ($keys as $index => $key) {
//                $status = $key->user_tg_id ? "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚ö™Ô∏è –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
//                $message .= ($index + 1) . ". <code>{$key->id}</code> - {$status}" .
//                    ($key->user_tg_id ? " (ID: {$key->user_tg_id})" : "") . "\n";
//            }
//
//            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π –≤ .txt —Ñ–∞–π–ª
//            $keyboard = [
//                'inline_keyboard' => [
//                    [
//                        [
//                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏',
//                            'callback_data' => json_encode([
//                                'action' => 'export_keys',
//                                'pack_id' => $packSalesmanId
//                            ])
//                        ],
//                        [
//                            'text' => '(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)',
//                            'callback_data' => json_encode([
//                                'action' => 'export_keys_only',
//                                'pack_id' => $packSalesmanId
//                            ])
//                        ]
//                    ],
//                    [
//                        [
//                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
//                            'callback_data' => json_encode([
//                                'action' => 'export_unactivated_keys',
//                                'pack_id' => $packSalesmanId
//                            ])
//                        ],
//                        [
//                            'text' => '(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)',
//                            'callback_data' => json_encode([
//                                'action' => 'export_unactivated_keys_only',
//                                'pack_id' => $packSalesmanId
//                            ])
//                        ]
//                    ],
//                    [
//                        [
//                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ',
//                            'callback_data' => json_encode([
//                                'action' => 'export_used_keys',
//                                'pack_id' => $packSalesmanId
//                            ])
//                        ],
//                        [
//                            'text' => '(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)',
//                            'callback_data' => json_encode([
//                                'action' => 'export_used_keys_only',
//                                'pack_id' => $packSalesmanId
//                            ])
//                        ]
//                    ]
//                ]
//            ];
//
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
//            if (strlen($message) <= 4096) {
//                $this->sendMessage($message, $keyboard);
//            } else {
//                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
//                $packInfo = "<b>üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:</b>\n\n";
//                if ($pack) {
//                    $packInfo .= "üíæ –¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
//                    $packInfo .= "‚è± –ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n\n";
//                } else {
//                    $packInfo .= "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω\n\n";
//                }
//                $this->sendMessage($packInfo);
//
//                // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ —á–∞—Å—Ç—è–º–∏
//                $chunkSize = 50;
//                $keyChunks = $keys->chunk($chunkSize);
//                foreach ($keyChunks as $index => $chunk) {
//                    $keyMessage = "<b>üîë –ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—á–∞—Å—Ç—å " . ($index + 1) . "):</b>\n";
//                    foreach ($chunk as $keyIndex => $key) {
//                        $status = $key->user_tg_id ? "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚ö™Ô∏è –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
//                        $keyMessage .= ($index * $chunkSize + $keyIndex + 1) . ". <code>{$key->id}</code> - {$status}" .
//                            ($key->user_tg_id ? " (ID: {$key->user_tg_id})" : "") . "\n";
//                    }
//                    $this->sendMessage($keyMessage);
//                }
//                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
//                $this->sendMessage("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –≤ .txt —Ñ–∞–π–ª:", $keyboard);
//            }
//        } catch (\Exception $e) {
//            Log::error('Error in showPackDetails: ' . $e->getMessage());
//            $this->sendErrorMessage();
//        }
//    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
     */
    private function showPackDetails(int $packSalesmanId): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates;

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º
            $totalKeys = $keys->count();
            $usedKeys = $keys->whereNotNull('user_tg_id')->count();
            $activeKeys = $totalKeys - $usedKeys;
            $usagePercent = $totalKeys > 0 ? round(($usedKeys / $totalKeys) * 100) : 0;

            // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $message = "üì¶ <b>–î–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞</b>\n\n";

            if ($pack) {
                // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//                $trafficGB = number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1);
//                $message .= "üíæ <b>–¢—Ä–∞—Ñ–∏–∫:</b> {$trafficGB} GB\n";
                $message .= "‚è± <b>–ü–µ—Ä–∏–æ–¥:</b> {$pack->period} –¥–Ω–µ–π\n";
            } else {
                // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç —É–¥–∞–ª–µ–Ω
                $message .= "‚ÑπÔ∏è <b>–¢–∏–ø –ø–∞–∫–µ—Ç–∞:</b> –ê—Ä—Ö–∏–≤–Ω—ã–π\n";
            }

            $message .= "üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> " . $packSalesman->created_at->format('d.m.Y H:i') . "\n\n";

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            $progressBar = $this->createProgressBar($usagePercent);
            $message .= "üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π:</b>\n";
            $message .= "{$progressBar} {$usagePercent}%\n";
            $message .= "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {$activeKeys} –∫–ª—é—á–µ–π\n";
            $message .= "üîí <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {$usedKeys} –∫–ª—é—á–µ–π\n";
            $message .= "üìã <b>–í—Å–µ–≥–æ:</b> {$totalKeys} –∫–ª—é—á–µ–π\n\n";

            if (!$pack) {
                $message .= "üí° <i>–≠—Ç–æ –∞—Ä—Ö–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç. –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤–∞—à–∏ –∫–ª—é—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏.</i>\n\n";
            }

            $message .= "üîç <b>–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É</b>";

            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            $keyboard = [
                'inline_keyboard' => [
                    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                    [
                        [
                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏',
                            'callback_data' => json_encode([
                                'action' => 'export_keys',
                                'pack_id' => $packSalesmanId
                            ])
                        ],
                        [
                            'text' => 'üìã (–¢–æ–ª—å–∫–æ –∫–ª—é—á–∏)',
                            'callback_data' => json_encode([
                                'action' => 'export_keys_only',
                                'pack_id' => $packSalesmanId
                            ])
                        ]
                    ],
                    // –§–∏–ª—å—Ç—Ä—ã
                    [
                        [
                            'text' => 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏',
                            'callback_data' => json_encode([
                                'action' => 'export_unactivated_keys',
                                'pack_id' => $packSalesmanId
                            ])
                        ],
                        [
                            'text' => 'üìã (–¢–æ–ª—å–∫–æ –∫–ª—é—á–∏)',
                            'callback_data' => json_encode([
                                'action' => 'export_unactivated_keys_only',
                                'pack_id' => $packSalesmanId
                            ])
                        ]
                    ],
                    [
                        [
                            'text' => 'üî¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ',
                            'callback_data' => json_encode([
                                'action' => 'export_used_keys',
                                'pack_id' => $packSalesmanId
                            ])
                        ],
                        [
                            'text' => 'üìã (–¢–æ–ª—å–∫–æ –∫–ª—é—á–∏)',
                            'callback_data' => json_encode([
                                'action' => 'export_used_keys_only',
                                'pack_id' => $packSalesmanId
                            ])
                        ]
                    ],
                    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
                    [
                        [
                            'text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É',
                            'callback_data' => json_encode([
                                'action' => 'show_packs',
                                'page' => 1
                            ])
                        ]
                    ]
                ]
            ];

            $this->sendMessage($message, $keyboard);

        } catch (\Exception $e) {
            Log::error('Error in showPackDetails: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

//    /**
//     * –ú–µ–Ω—é –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
//     */
//    private function exportAllKeysMenu(): void
//    {
//        try {
//            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
//            if (!$salesman) {
//                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
//                return;
//            }
//
//            $message = "üì• <b>–í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π</b>\n\n";
//            $message .= "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–≥—Ä—É–∑–∫–∏:\n\n";
//            $message .= "‚Ä¢ <b>–í—Å–µ –∫–ª—é—á–∏</b> - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π\n";
//            $message .= "‚Ä¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ</b> - —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏\n";
//            $message .= "‚Ä¢ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ</b> - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏\n";
//
//            $keyboard = [
//                'inline_keyboard' => [
//                    [
//                        [
//                            'text' => 'üì• –í—Å–µ –∫–ª—é—á–∏',
//                            'callback_data' => json_encode(['action' => 'export_all_keys'])
//                        ],
//                        [
//                            'text' => 'üìã (–¢–æ–ª—å–∫–æ –∫–ª—é—á–∏)',
//                            'callback_data' => json_encode(['action' => 'export_all_keys_only'])
//                        ]
//                    ],
//                    [
//                        [
//                            'text' => 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏',
//                            'callback_data' => json_encode(['action' => 'export_all_active_keys'])
//                        ],
//                        [
//                            'text' => 'üìã (–¢–æ–ª—å–∫–æ –∫–ª—é—á–∏)',
//                            'callback_data' => json_encode(['action' => 'export_all_active_keys_only'])
//                        ]
//                    ],
//                    [
//                        [
//                            'text' => 'üî¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ',
//                            'callback_data' => json_encode(['action' => 'export_all_used_keys'])
//                        ],
//                        [
//                            'text' => 'üìã (–¢–æ–ª—å–∫–æ –∫–ª—é—á–∏)',
//                            'callback_data' => json_encode(['action' => 'export_all_used_keys_only'])
//                        ]
//                    ],
//                    [
//                        [
//                            'text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
//                            'callback_data' => json_encode(['action' => 'show_packs', 'page' => 1])
//                        ]
//                    ]
//                ]
//            ];
//
//            $this->sendMessage($message, $keyboard);
//
//        } catch (\Exception $e) {
//            Log::error('Error in exportAllKeysMenu: ' . $e->getMessage());
//            $this->sendErrorMessage();
//        }
//    }

//    /**
//     * –í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø—Ä–æ–¥–∞–≤—Ü–∞
//     */
//    private function exportAllKeys(bool $withText = true): void
//    {
//        try {
//            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
//            if (!$salesman) {
//                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
//                return;
//            }
//
//            $allPacks = PackSalesman::where('salesman_id', $salesman->id)
//                ->where('status', PackSalesman::PAID)
//                ->with('keyActivates')
//                ->get();
//
//            $content = "";
//            if ($withText) {
//                $content .= "–í—Å–µ –∫–ª—é—á–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞\n";
//                $content .= "Telegram ID: {$salesman->telegram_id}\n";
//                $content .= "–ë–æ—Ç: {$salesman->bot_link}\n";
//                $content .= "–î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏: " . date('d.m.Y H:i') . "\n\n";
//            }
//
//            $totalKeys = 0;
//            foreach ($allPacks as $pack) {
//                foreach ($pack->keyActivates as $key) {
//                    $content .= "{$key->id}\n";
//                    $totalKeys++;
//                }
//            }
//
//            if ($withText) {
//                $content .= "\n–í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {$totalKeys}";
//            }
//
//            $this->sendKeysFile($content, "all_keys_{$salesman->telegram_id}.txt", "–í—Å–µ –∫–ª—é—á–∏ ({$totalKeys})");
//
//        } catch (\Exception $e) {
//            Log::error('Error in exportAllKeys: ' . $e->getMessage());
//            $this->sendErrorMessage();
//        }
//    }


    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ | (–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)
     *
     * @param int $packSalesmanId
     * @return void
     */
    private function exportKeysOnlyToFile(int $packSalesmanId): void
    {
        $this->exportKeysToFile($packSalesmanId, false);
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ | (–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)
     *
     * @param int $packSalesmanId
     * @return void
     */
    private function exportUnactivatedKeysOnlyToFile(int $packSalesmanId): void
    {
        $this->exportUnactivatedKeysToFile($packSalesmanId, false);
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞ | (–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)
     *
     * @param int $packSalesmanId
     * @return void
     */
    private function exportKeysWithTrafficOnlyToFile(int $packSalesmanId): void
    {
        $this->exportKeysWithTrafficToFile($packSalesmanId, false);
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ | (–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)
     *
     * @param int $packSalesmanId
     * @return void
     */
    private function exportUsedKeysOnlyToFile(int $packSalesmanId): void
    {
        $this->exportUsedKeysToFile($packSalesmanId, false);
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏
     *
     * @param int $packSalesmanId
     * @param bool $withText
     * @return void
     */
    private function exportKeysToFile(int $packSalesmanId, bool $withText = true): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates;

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "";
            if ($withText) {
                $content .= "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
//                $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                if ($pack) {
                    $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
                } else {
                    $content .= "–¢–∏–ø: –ê—Ä—Ö–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç\n";
                }
                $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
                $content .= "–ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n";
            }

            foreach ($keys as $index => $key) {
                $content .= "{$key->id}\n";
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "keys_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportKeysToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
     *
     * @param int $packSalesmanId
     * @param bool $withText
     * @return void
     */
    private function exportUnactivatedKeysToFile(int $packSalesmanId, bool $withText = true): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates->whereNull('user_tg_id');

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "";
            if ($withText) {
                $content .= "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
//                $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                if ($pack) {
                    $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
                } else {
                    $content .= "–¢–∏–ø: –ê—Ä—Ö–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç\n";
                }
                $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
                $content .= "–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n";
            }

//            if (!empty($keys))
//                $content .= "–ù–µ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π";

            foreach ($keys as $index => $key) {
                $content .= "{$key->id}\n";
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "unactivated_keys_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportUnactivatedKeysToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞
     *
     * @param int $packSalesmanId
     * @param bool $withText
     * @return void
     */
    private function exportKeysWithTrafficToFile(int $packSalesmanId, bool $withText = true): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates->where('traffic_used', '<', $pack->traffic_limit);

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "";
            if ($withText) {
                $content .= "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
//                $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                if ($pack) {
                    $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
                } else {
                    $content .= "–¢–∏–ø: –ê—Ä—Ö–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç\n";
                }
                $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
                $content .= "–ö–ª—é—á–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞:\n";
            }

            foreach ($keys as $index => $key) {
                $content .= "{$key->id}\n";
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "keys_with_traffic_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportKeysWithTrafficToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
     *
     * @param int $packSalesmanId
     * @param bool $withText
     * @return void
     */
    private function exportUsedKeysToFile(int $packSalesmanId, bool $withText = true): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates->whereNotNull('user_tg_id');

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "";
            if ($withText) {
                $content .= "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
//                $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                if ($pack) {
                    $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
                } else {
                    $content .= "–¢–∏–ø: –ê—Ä—Ö–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç\n";
                }
                $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
                $content .= "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:\n";
            }

            foreach ($keys as $index => $key) {
                $content .= "{$key->id}\n";
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "used_keys_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportUsedKeysToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle bot token from user
     */
    private function handleBotToken(string $token): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
            $telegram = new Api($token);
            $botInfo = $telegram->getMe();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();

            if ($salesman) {
                $salesman->token = $token;
                $salesman->bot_link = 'https://t.me/' . $botInfo->username;
                $salesman->state = null; // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                $salesman->save();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
                $salesmanBot = new Api($token);
                $webhookUrl = rtrim(self::WEBHOOK_BASE_URL, '/') . '/api/telegram/salesman-bot/' . $token . '/init';
                $salesmanBot->setWebhook(['url' => $webhookUrl]);

                $message = "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç VPN-–¥–æ—Å—Ç—É–ø–æ–≤.";
                $this->generateMenu($message);
//                $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç VPN-–¥–æ—Å—Ç—É–ø–æ–≤.");
            }
        } catch (\Exception $e) {
            Log::error('Bot token validation error: ' . $e->getMessage());
            $this->sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if ($salesman) {
                $salesman->state = null;
                $salesman->save();
            }
        }
    }

    /**
     * Start command handler
     */
    protected function start(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $existingSalesman = Salesman::where('telegram_id', $this->chatId)->first();

            if (!$existingSalesman) {
                $this->salesmanService->create($this->chatId, $this->username == null ? null : $this->firstName);
            }

//            $message = "üëã <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-–¥–æ—Å—Ç—É–ø–∞–º–∏!</i>\n\n\n";
//            $message .= "üåç <b>–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ VPN?</b> –° –Ω–∞–º–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ!\n\n\n";
//            $message .= "üöÄ <i><b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b></i>\n\n";
//            $message .= "üîπ <i>–ì–æ—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É</i> - –ø–æ–∫—É–ø–∞–π—Ç–µ –ø–∞–∫–µ—Ç—ã –∫–ª—é—á–µ–π –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã\n\n";
//            $message .= "üîπ <i>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é</i> - –í–∞—à –±–æ—Ç —Å–∞–º –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø—ã –∫–ª–∏–µ–Ω—Ç–∞–º 24/7\n\n";
//            $message .= "üîπ <i>–ì–∏–±–∫–æ—Å—Ç—å</i> - –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã, —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–µ–Ω–∞–º–∏ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º\n\n";
//            $message .= "üîπ <i>–í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å</i> - VPN –Ω—É–∂–µ–Ω –º–Ω–æ–≥–∏–º, –∞ –∑–Ω–∞—á–∏—Ç, –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!\n\n";
//            $message .= "üîπ <i>–ü—Ä–æ—Å—Ç–æ—Ç—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</i> - –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n\n\n";
//            $message .= "üíº  <i><b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b></i>\n\n";
//            $message .= "1Ô∏è‚É£ –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç VPN-–∫–ª—é—á–µ–π\n\n";
//            $message .= "2Ô∏è‚É£ –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∫ —Å–∏—Å—Ç–µ–º–µ\n\n";
//            $message .= "3Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å\n\n\n";
//            $message .= "üì≤ –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ VPN —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!\n";
//            $message .= "<b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>\n";

            $message = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-–¥–æ—Å—Ç—É–ø–∞–º–∏!</b>\n\n";
            $message .= "<i>–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º –ø–æ –ø—Ä–æ–¥–∞–∂–µ VPN.</i>\n\n";
            $message .= "üöÄ <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ 3 —à–∞–≥–∞:</b>\n\n";
            $message .= "1Ô∏è‚É£ <b>–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞</b>\n";
            $message .= "   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ <a href=\"https://t.me/BotFather\">@BotFather</a>\n";
            $message .= "   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É <b>\"ü§ñ –ú–æ–π –±–æ—Ç\"</b>\n\n";
            $message .= "2Ô∏è‚É£ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –∫—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç—ã</b>\n";
            $message .= "   ‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Å–∏—Å—Ç–µ–º–µ\n";
            $message .= "   ‚Ä¢ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–∞–∫–µ—Ç—ã VPN-–∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n\n";
            $message .= "3Ô∏è‚É£ <b>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥—É–ª—å –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å</b>\n";
            $message .= "   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ VPN-–º–æ–¥—É–ª—å –≤ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n";
            $message .= "   ‚Ä¢ –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 24/7\n\n";
            $message .= "üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n";
            $message .= "‚Ä¢ 4 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: Vless/Vmess/Shadowsocks/Trojan\n";
            $message .= "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n";
            $message .= "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫—É –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Android, iOS, Windows, MacOS, Android TV)\n";
            $message .= "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤—ã–¥–∞—á—É –∫–ª—é—á–µ–π\n";
            $message .= "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n";
            $message .= "üìö <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n";
            $message .= "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞: –∫–Ω–æ–ø–∫–∞ <b>\"‚ùì –ü–æ–º–æ—â—å\"</b>\n\n";
            $message .= "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚Üì</i>";

            $this->generateMenu($message);
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
     */
    protected function generateMenu($message = null): void
    {
        $keyboard = [
            'keyboard' => [
                [
                    ['text' => 'ü§ñ –ú–æ–π –±–æ—Ç'],
                    ['text' => 'üì¶ –ü–∞–∫–µ—Ç—ã']
                ],
                [
                    ['text' => 'ü™™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'],
//                    ['text' => 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'],
                    ['text' => 'üåé –ü–æ–º–æ—â—å']
                ],
                [
                    ['text' => '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "‚ùì –ü–æ–º–æ—â—å"'],
                    ['text' => 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç "‚ùì –ü–æ–º–æ—â—å"']
                ]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];

        if ($message) {
            $this->sendMessage($message, $keyboard);
        } else {
            $this->telegram->sendMessage([
                'chat_id' => $this->chatId,
                'text' => 'üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                'parse_mode' => 'HTML',
                'reply_markup' => json_encode($keyboard)
            ]);
        }
    }

    /**
     * @return void
     */
    protected function showHelp(): void
    {
        $message = "<blockquote><b>üåé –ü–æ–º–æ—â—å</b></blockquote>\n\n\n";
        $message .= "ü§ñ<b> –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞?</b>\n\n\n";
        $message .= "1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ @BotFather –∏ –Ω–∞–∂–∏–º–∞–µ–º start/–Ω–∞—á–∞—Ç—å\n\n";
        $message .= "2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /newbot\n\n";
        $message .= "3Ô∏è‚É£ –í–≤–æ–¥–∏–º –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞. –ü–æ—Ç–æ–º –≤–≤–æ–¥–∏–º –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å–ª–∏—Ç–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–æ–≤–æ _bot\n";
        $message .= "4Ô∏è‚É£ –ü—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –ø–æ—Å–ª–µ API –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—à —Ç–æ–∫–µ–Ω.\n\n\n";
        $message .= "ü™ô <b> –ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å VPN?</b>\n\n\n";
        $message .= "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>ü§ñ –ú–æ–π –±–æ—Ç</b>\n\n";
        $message .= "2Ô∏è‚É£ –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –±–æ—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞–Ω–µ–µ –≤—ã–ø—É—â–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–∞–∫–µ—Ç—ã\n";
        $message .= "<i>–ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –í–∞–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç—ã –∏ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏</i>\n\n\n";
        $message .= "üë®üèª‚Äçüíª –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>";

        $this->sendMessage($message);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    protected function showBotInfo(?int $messageId = null): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (empty($salesman->token)) {
                $salesman->state = self::STATE_WAITING_TOKEN;
                $salesman->save();

                $this->sendMessage("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>\n\n–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @BotFather");
                return;
            }

            $message = "<blockquote>ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–æ—Ç–µ:</blockquote>\n\n";
            $message .= "üîó –í–∞—à –±–æ—Ç: $salesman->bot_link\n";
            $message .= "‚úÖ –°—Ç–∞—Ç—É—Å: " . ($salesman->bot_active ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω") . "\n\n";

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => $salesman->bot_active ? 'üü¢ –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞' : 'üî¥ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞',
                            'callback_data' => json_encode(['action' => 'toggle_bot'])
                        ],
//                        [
//                            'text' => 'üìÅ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã',
//                            'callback_data' => json_encode(['action' => 'buy_packs'])
//                        ],
                    ],
                    [
                        [
                            'text' => '‚ôªÔ∏è –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞',
                            'callback_data' => json_encode(['action' => 'change_bot'])
                        ]
                    ],
                    [
                        [
                            'text' => 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞',
                            'callback_data' => json_encode(['action' => 'reload_bot'])
                        ]
                    ]
                ]
            ];

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }
        } catch (\Exception $e) {
            Log::error('Show bot info error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ—Ç–∞, –æ–±–Ω–æ–≤–ª—è—è –≤–µ–±—Ö—É–∫
     */
    private function reloadBot(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (empty($salesman->token)) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                return;
            }

            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –¥–ª—è –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
            $salesmanBot = new Api($salesman->token);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
            $webhookUrl = rtrim(self::WEBHOOK_BASE_URL, '/') . '/api/telegram/salesman-bot/' . $salesman->token . '/init';
            $salesmanBot->setWebhook(['url' => $webhookUrl]);

            $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω, Webhook –æ–±–Ω–æ–≤–ª–µ–Ω.");
        } catch (\Exception $e) {
            Log::error('Bot reload error: ' . $e->getMessage());
            $this->sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞: " . $e->getMessage());
        }
    }

    /**
     * Toggle bot active status
     */
    private function toggleBot(int $messageId): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $salesman->bot_active = !$salesman->bot_active;
            $salesman->save();

            $this->showBotInfo($messageId);

            $status = $salesman->bot_active ? "–≤–∫–ª—é—á–µ–Ω üü¢" : "–æ—Ç–∫–ª—é—á–µ–Ω üî¥";
//            $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ " . $status);
        } catch (Exception $e) {
            Log::error('Toggle bot error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
     */
    protected function showProfile(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->firstOrFail();

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            $activePacks = PackSalesman::where('salesman_id', $salesman->id)
                ->where('status', PackSalesman::PAID)
                ->count();

            $userUsername = $salesman->username ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            $message = "<blockquote><b>ü™™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b></blockquote>\n\n";
            $message .= "üÜî <b>Telegram ID: <code>{$salesman->telegram_id}</code></b>\n";

            if ($userUsername !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ') {
                $message .= "üìü <b>–ò–º—è:</b> <code>{$userUsername}</code>\n";
            }

            $message .= "üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: <code>{$activePacks}</code></b>\n";

            if ($salesman->created_at) {
                $message .= "üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>" . $salesman->created_at->format('d.m.Y H:i') . "</code></b>\n";
            }

            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üîë –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                            'url' => $this->generateAuthUrl()
                        ]
                    ]
                ]
            ];

            $this->sendMessage($message, $keyboard);
        } catch (\Exception $e) {
            Log::error('Show profile error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }
}
