<?php

namespace App\Services\Telegram\ModuleBot;

use App\Models\PackSalesman\PackSalesman;
use App\Models\Salesman\Salesman;
use DateInterval;
use DateTime;
use Exception;
use Telegram\Bot\Api;
use Illuminate\Support\Facades\Log;

class FatherBotController extends AbstractTelegramBot
{
    private const STATE_WAITING_TOKEN = 'waiting_token';

    public function __construct(string $token)
    {
        parent::__construct($token);
        $this->setWebhook($token, self::BOT_TYPE_FATHER);
    }

    /**
     * Process incoming update and route to appropriate action
     */
    public function processUpdate(): void
    {
        try {
            $message = $this->update->getMessage();
            $callbackQuery = $this->update->getCallbackQuery();

            if ($callbackQuery) {
                Log::info('–í—ã–∑–æ–≤ callback query', [
                    'data' => $callbackQuery->getData(),
                    'from' => $callbackQuery->getFrom()->getId()
                ]);
                $this->processCallback($callbackQuery->getData());
                return;
            }

            if ($message) {
                $text = $message->getText();

                if (!$text) {
                    Log::warning('Received message without text', [
                        'message' => $message
                    ]);
                    return;
                }

                if ($text === '/start') {
                    $this->start();
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                $salesman = Salesman::where('telegram_id', $this->chatId)->first();
                if ($salesman && $salesman->state === self::STATE_WAITING_TOKEN) {
                    $this->handleBotToken($text);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
                switch ($text) {
                    case 'ü§ñ –ú–æ–π –±–æ—Ç':
                        $this->showBotInfo();
                        break;
                    case 'üì¶ –ü–∞–∫–µ—Ç—ã':
                        $this->showPacksList();
                        break;
                    case 'ü™™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
                        $this->showProfile();
                        break;
                    case 'üåé –ü–æ–º–æ—â—å':
                        $this->showHelp();
                        break;
                    default:
                        $this->sendMessage('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
                }
            }
        } catch (Exception $e) {
            Log::error('Error processing update in FatherBot', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    /**
     * Process callback queries
     */
    private function processCallback($data): void
    {
        try {
            Log::info('Processing callback data', ['data' => $data]);
            $params = json_decode($data, true);
            if (!$params || !isset($params['action'])) {
                Log::error('Invalid callback data', ['data' => $data]);
                return;
            }

            $messageId = $this->update->getCallbackQuery()->getMessage()->getMessageId();

            switch ($params['action']) {
                case 'change_bot':
                    $this->initiateBotChange();
                    break;
                case 'show_pack':
                    if (isset($params['pack_id'])) {
                        $this->showPackDetails($params['pack_id']);
                    }
                    break;
                case 'export_keys':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysToFile($params['pack_id']);
                    }
                    break;
                case 'export_keys_only':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysOnlyToFile($params['pack_id']);
                    }
                    break;
                case 'export_unactivated_keys':
                    if (isset($params['pack_id'])) {
                        $this->exportUnactivatedKeysToFile($params['pack_id']);
                    }
                    break;
                case 'export_unactivated_keys_only':
                    if (isset($params['pack_id'])) {
                        $this->exportUnactivatedKeysOnlyToFile($params['pack_id']);
                    }
                    break;
                case 'export_keys_with_traffic':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysWithTrafficToFile($params['pack_id']);
                    }
                    break;
                case 'export_keys_with_traffic_only':
                    if (isset($params['pack_id'])) {
                        $this->exportKeysWithTrafficOnlyToFile($params['pack_id']);
                    }
                    break;
                case 'export_used_keys':
                    if (isset($params['pack_id'])) {
                        $this->exportUsedKeysToFile($params['pack_id']);
                    }
                    break;
                case 'export_used_keys_only':
                    if (isset($params['pack_id'])) {
                        $this->exportUsedKeysOnlyToFile($params['pack_id']);
                    }
                    break;
                case 'show_packs':
                    $page = $params['page'] ?? 1;
                    $this->showPacksList($page, $messageId);
                    break;
                case 'packs_page':
                    if (isset($params['page'])) {
                        $this->showPacksList($params['page'], $messageId);
                    }
                    break;
                case 'toggle_bot':
                    $this->toggleBot($messageId);
                    break;
                case 'reload_bot':
                    $this->reloadBot();
                    break;
                default:
                    Log::warning('Unknown callback action', [
                        'action' => $params['action'],
                        'data' => $data
                    ]);
            }
        } catch (Exception $e) {
            Log::error('Process callback error: ' . $e->getMessage(), [
                'trace' => $e->getTraceAsString()
            ]);
            $this->sendErrorMessage();
        }
    }

    /**
     * Initiate bot change process
     */
    private function initiateBotChange(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $salesman->state = self::STATE_WAITING_TOKEN;
            $salesman->save();

            $message = "<i><b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b></i>\n\n";
            $message .= "üîë <i><b>–ö–∞–∫ –≤—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω?</b></i>\n\n";
            $message .= "1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ @BotFather –∏ –Ω–∞–∂–∏–º–∞–µ–º start/–Ω–∞—á–∞—Ç—å\n\n";
            $message .= "2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /newbot\n\n";
            $message .= "3Ô∏è‚É£ –í–≤–æ–¥–∏–º –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞. –ü–æ—Ç–æ–º –≤–≤–æ–¥–∏–º –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å–ª–∏—Ç–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–æ–≤–æ _bot\n\n";
            $message .= "4Ô∏è‚É£ –ü—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –ø–æ—Å–ª–µ API –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—à —Ç–æ–∫–µ–Ω.\n\n";

            $this->sendMessage($message);
        } catch (Exception $e) {
            Log::error('Initiate bot change error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    private function showPacksList(int $page = 1, ?int $messageId = null): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            $perPage = 10;

            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            $packs = PackSalesman::where('salesman_id', $salesman->id)
                ->where('status', PackSalesman::PAID)
                ->with('pack')
                ->orderBy('created_at', 'desc')
                ->paginate($perPage, ['*'], 'page', $page);

            if ($packs->isEmpty()) {
                $this->sendMessage("‚ùå –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å <b>–Ω–µ—Ç</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö <b>–ø–∞–∫–µ—Ç–æ–≤</b>, —É—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç –∫–ª—é—á–µ–π –∏ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!");
                return;
            }

            $message = "<blockquote><b>üì¶ –ü–∞–∫–µ—Ç—ã –∫–ª—é—á–µ–π:</b></blockquote>\n\n";
            $keyboard = ['inline_keyboard' => []];

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            foreach ($packs as $packSalesman) {
                $pack = $packSalesman->pack;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç
                if ($pack) {
                    $date = new DateTime($packSalesman->created_at);
                    $date->add(new DateInterval("P{$pack->period}D"));
                    $formattedDate = $date->format('d.m.Y');
                    $traffic = number_format($pack->traffic_limit / (1024 * 1024 * 1024));

                    $text = "üì¶{$traffic}GB| –ü–µ—Ä–∏–æ–¥: {$pack->period}–¥| –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ: {$formattedDate}";

//                    $text = "üì¶ –¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB|";
//                    $text .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π|";
//                    $text .= "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ: {$formattedDate}";
                } else {
                    $text = "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω";
                }

                $keyboard['inline_keyboard'][] = [
                    [
                        'text' => $text,
                        'callback_data' => json_encode([
                            'action' => 'show_pack',
                            'pack_id' => $packSalesman->id
                        ])
                    ]
                ];
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if ($packs->hasPages()) {
                $paginationButtons = [];

                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                if ($packs->currentPage() > 1) {
                    $paginationButtons[] = [
                        'text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                        'callback_data' => json_encode([
                            'action' => 'packs_page',
                            'page' => $packs->currentPage() - 1
                        ])
                    ];
                }

                // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
                if ($packs->hasMorePages()) {
                    $paginationButtons[] = [
                        'text' => '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
                        'callback_data' => json_encode([
                            'action' => 'packs_page',
                            'page' => $packs->currentPage() + 1
                        ])
                    ];
                }

                $keyboard['inline_keyboard'][] = $paginationButtons;
            }

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }
        } catch (\Exception $e) {
            Log::error('Error in showPacksList: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞ –∏ –µ–≥–æ –∫–ª—é—á–∏
     */
    private function showPackDetails(int $packSalesmanId): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }
            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();
            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates;

            if ($pack) {
                $date = new DateTime($packSalesman->created_at);
                $date->add(new DateInterval("P{$pack->period}D"));
                $formattedDate = $date->format('d.m.Y');
                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ
                $message = "<b>üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:</b>\n\n";
                $message .= "üíæ –¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                $message .= "‚è± –ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n\n";
                $message .= "‚è± –ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n\n";
                $message .= "‚è± –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ: {$formattedDate}\n\n";
            } else {
                // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —É–¥–∞–ª–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
                $message = "<b>üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:</b>|‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω";
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            $message .= "<b>üîë –ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n";
            foreach ($keys as $index => $key) {
                $status = $key->user_tg_id ? "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚ö™Ô∏è –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
                if ($key->user_tg_id) {
                    $message .= ($index + 1) . ". <code>{$key->id}</code> - {$status} (ID: {$key->user_tg_id})\n";
                } else {
                    $message .= ($index + 1) . ". <code>{$key->id}</code> - {$status}\n";
                }
            }

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π –≤ .txt —Ñ–∞–π–ª
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏',
                            'callback_data' => json_encode([
                                'action' => 'export_keys',
                                'pack_id' => $packSalesmanId
                            ])
                        ],
                        [
                            'text' => '(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)',
                            'callback_data' => json_encode([
                                'action' => 'export_keys_only',
                                'pack_id' => $packSalesmanId
                            ])
                        ]
                    ],
                    [
                        [
                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
                            'callback_data' => json_encode([
                                'action' => 'export_unactivated_keys',
                                'pack_id' => $packSalesmanId
                            ])
                        ],
                        [
                            'text' => '(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)',
                            'callback_data' => json_encode([
                                'action' => 'export_unactivated_keys_only',
                                'pack_id' => $packSalesmanId
                            ])
                        ]
                    ],
//                    [
//                        [
//                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞',
//                            'callback_data' => json_encode([
//                                'action' => 'export_keys_with_traffic',
//                                'pack_id' => $packSalesmanId
//                            ])
//                        ],
//                        [
//                            'text' => '(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)',
//                            'callback_data' => json_encode([
//                                'action' => 'export_keys_with_traffic_only',
//                                'pack_id' => $packSalesmanId
//                            ])
//                        ]
//                    ],
                    [
                        [
                            'text' => 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ',
                            'callback_data' => json_encode([
                                'action' => 'export_used_keys',
                                'pack_id' => $packSalesmanId
                            ])
                        ],
                        [
                            'text' => '(–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)',
                            'callback_data' => json_encode([
                                'action' => 'export_used_keys_only',
                                'pack_id' => $packSalesmanId
                            ])
                        ]
                    ]
                ]
            ];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if (strlen($message) <= 4096) {
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                $this->sendMessage($message, $keyboard);
            } else {
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                $this->sendMessage("<b>üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:</b>\n\nüíæ –¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n‚è± –ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n\n");

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ —á–∞—Å—Ç—è–º–∏
                $chunkSize = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                $keyChunks = $keys->chunk($chunkSize);
                $globalIndex = 1; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–∫–≤–æ–∑–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                foreach ($keyChunks as $index => $chunk) {
                    $keyMessage = "<b>üîë –ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—á–∞—Å—Ç—å " . ($index + 1) . "):</b>\n";
                    foreach ($chunk as $key) {
                        $status = $key->user_tg_id ? "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚ö™Ô∏è –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
                        if ($key->user_tg_id) {
                            $keyMessage .= $globalIndex . ". <code>{$key->id}</code> - {$status} (ID: {$key->user_tg_id})\n";
                        } else {
                            $keyMessage .= $globalIndex . ". <code>{$key->id}</code> - {$status}\n";
                        }
                        $globalIndex++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
                    }
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∫–ª—é—á–µ–π
                    $this->sendMessage($keyMessage);
                }
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
                $this->sendMessage("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –≤ .txt —Ñ–∞–π–ª:", $keyboard);
            }
        } catch (\Exception $e) {
            Log::error('Error in showPackDetails: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ | (–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)
     *
     * @param int $packSalesmanId
     * @return void
     */
    private function exportKeysOnlyToFile(int $packSalesmanId): void
    {
        $this->exportKeysToFile($packSalesmanId, false);
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ | (–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)
     *
     * @param int $packSalesmanId
     * @return void
     */
    private function exportUnactivatedKeysOnlyToFile(int $packSalesmanId): void
    {
        $this->exportUnactivatedKeysToFile($packSalesmanId, false);
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞ | (–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)
     *
     * @param int $packSalesmanId
     * @return void
     */
    private function exportKeysWithTrafficOnlyToFile(int $packSalesmanId): void
    {
        $this->exportKeysWithTrafficToFile($packSalesmanId, false);
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ | (–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞)
     *
     * @param int $packSalesmanId
     * @return void
     */
    private function exportUsedKeysOnlyToFile(int $packSalesmanId): void
    {
        $this->exportUsedKeysToFile($packSalesmanId, false);
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏
     *
     * @param int $packSalesmanId
     * @param bool $withText
     * @return void
     */
    private function exportKeysToFile(int $packSalesmanId, bool $withText = true): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates;

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "";
            if ($withText) {
                $content .= "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
                $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
                $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
                $content .= "–ö–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n";
            }

            foreach ($keys as $index => $key) {
                $content .= "{$key->id}\n";
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "keys_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –¥–ª—è –ø–∞–∫–µ—Ç–∞ {$pack->id}"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportKeysToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
     *
     * @param int $packSalesmanId
     * @param bool $withText
     * @return void
     */
    private function exportUnactivatedKeysToFile(int $packSalesmanId, bool $withText = true): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates->whereNull('user_tg_id');

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "";
            if ($withText) {
                $content .= "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
                $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
                $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
                $content .= "–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n";
            }

            if (!empty($keys))
                $content .= "–ù–µ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π";

            foreach ($keys as $index => $key) {
                $content .= "{$key->id}\n";
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "unactivated_keys_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–∞–∫–µ—Ç–∞ {$pack->id}"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportUnactivatedKeysToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞
     *
     * @param int $packSalesmanId
     * @param bool $withText
     * @return void
     */
    private function exportKeysWithTrafficToFile(int $packSalesmanId, bool $withText = true): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates->where('traffic_used', '<', $pack->traffic_limit);

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "";
            if ($withText) {
                $content .= "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
                $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
                $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
                $content .= "–ö–ª—é—á–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞:\n";
            }

            foreach ($keys as $index => $key) {
                $content .= "{$key->id}\n";
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "keys_with_traffic_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–∞–∫–µ—Ç–∞ {$pack->id}"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportKeysWithTrafficToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
     *
     * @param int $packSalesmanId
     * @param bool $withText
     * @return void
     */
    private function exportUsedKeysToFile(int $packSalesmanId, bool $withText = true): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $packSalesman = PackSalesman::with(['pack', 'keyActivates'])
                ->where('id', $packSalesmanId)
                ->where('salesman_id', $salesman->id)
                ->firstOrFail();

            $pack = $packSalesman->pack;
            $keys = $packSalesman->keyActivates->whereNotNull('user_tg_id');

            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = "";
            if ($withText) {
                $content .= "–ü–∞–∫–µ—Ç: ID {$packSalesman->id}\n";
                $content .= "–¢—Ä–∞—Ñ–∏–∫: " . number_format($pack->traffic_limit / (1024 * 1024 * 1024), 1) . " GB\n";
                $content .= "–ü–µ—Ä–∏–æ–¥: {$pack->period} –¥–Ω–µ–π\n";
                $content .= "–ö–ª—é—á–∏ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ: $salesman->bot_link\n\n";
                $content .= "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:\n";
            }

            foreach ($keys as $index => $key) {
                $content .= "{$key->id}\n";
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $fileName = "used_keys_{$packSalesman->id}.txt";
            $tempPath = storage_path('app/temp/' . $fileName);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!file_exists(storage_path('app/temp'))) {
                mkdir(storage_path('app/temp'), 0777, true);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
            file_put_contents($tempPath, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $this->telegram->sendDocument([
                'chat_id' => $this->chatId,
                'document' => fopen($tempPath, 'r'),
                'caption' => "üì• –í—ã–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–∞–∫–µ—Ç–∞ {$pack->id}"
            ]);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempPath);
        } catch (\Exception $e) {
            Log::error('Error in exportUsedKeysToFile: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * Handle bot token from user
     */
    private function handleBotToken(string $token): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
            $telegram = new Api($token);
            $botInfo = $telegram->getMe();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();

            if ($salesman) {
                $salesman->token = $token;
                $salesman->bot_link = 'https://t.me/' . $botInfo->username;
                $salesman->state = null; // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                $salesman->save();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
                $salesmanBot = new Api($token);
                $webhookUrl = rtrim(self::WEBHOOK_BASE_URL, '/') . '/api/telegram/salesman-bot/' . $token . '/init';
                $salesmanBot->setWebhook(['url' => $webhookUrl]);

                $message = "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç VPN-–¥–æ—Å—Ç—É–ø–æ–≤.";
                $this->generateMenu($message);
//                $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç VPN-–¥–æ—Å—Ç—É–ø–æ–≤.");
            }
        } catch (\Exception $e) {
            Log::error('Bot token validation error: ' . $e->getMessage());
            $this->sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if ($salesman) {
                $salesman->state = null;
                $salesman->save();
            }
        }
    }

    /**
     * Start command handler
     */
    protected function start(): void
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $existingSalesman = Salesman::where('telegram_id', $this->chatId)->first();

            if (!$existingSalesman) {
                $this->salesmanService->create($this->chatId, $this->username == null ? null : $this->firstName);
            }

            $message = "üëã <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-–¥–æ—Å—Ç—É–ø–∞–º–∏!</i>\n\n\n";
            $message .= "üåç <b>–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ VPN?</b> –° –Ω–∞–º–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ!\n\n\n";
            $message .= "üöÄ <i><b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b></i>\n\n";
            $message .= "üîπ <i>–ì–æ—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É</i> - –ø–æ–∫—É–ø–∞–π—Ç–µ –ø–∞–∫–µ—Ç—ã –∫–ª—é—á–µ–π –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã\n\n";
            $message .= "üîπ <i>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é</i> - –í–∞—à –±–æ—Ç —Å–∞–º –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø—ã –∫–ª–∏–µ–Ω—Ç–∞–º 24/7\n\n";
            $message .= "üîπ <i>–ì–∏–±–∫–æ—Å—Ç—å</i> - –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã, —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–µ–Ω–∞–º–∏ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º\n\n";
            $message .= "üîπ <i>–í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å</i> - VPN –Ω—É–∂–µ–Ω –º–Ω–æ–≥–∏–º, –∞ –∑–Ω–∞—á–∏—Ç, –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!\n\n";
            $message .= "üîπ <i>–ü—Ä–æ—Å—Ç–æ—Ç—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</i> - –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n\n\n";
            $message .= "üíº  <i><b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b></i>\n\n";
            $message .= "1Ô∏è‚É£ –ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç VPN-–∫–ª—é—á–µ–π\n\n";
            $message .= "2Ô∏è‚É£ –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∫ —Å–∏—Å—Ç–µ–º–µ\n\n";
            $message .= "3Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å\n\n\n";
            $message .= "üì≤ –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ VPN —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!\n";
            $message .= "<b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>\n";

            $this->generateMenu($message);
        } catch (\Exception $e) {
            Log::error('Start command error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
     */
    protected function generateMenu($message = null): void
    {
        $keyboard = [
            'keyboard' => [
                [
                    ['text' => 'ü§ñ –ú–æ–π –±–æ—Ç'],
                    ['text' => 'üì¶ –ü–∞–∫–µ—Ç—ã']
                ],
                [
                    ['text' => 'ü™™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'],
                ],
                [
                    ['text' => 'üåé –ü–æ–º–æ—â—å']
                ]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => false
        ];

        if ($message) {
            $this->sendMessage($message, $keyboard);
        } else {
            $this->telegram->sendMessage([
                'chat_id' => $this->chatId,
                'text' => 'üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                'parse_mode' => 'HTML',
                'reply_markup' => json_encode($keyboard)
            ]);
        }
    }

    /**
     * @return void
     */
    protected function showHelp(): void
    {
        $message = "<blockquote><b>üåé –ü–æ–º–æ—â—å</b></blockquote>\n\n\n";
        $message .= "ü§ñ<b> –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞?</b>\n\n\n";
        $message .= "1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ @BotFather –∏ –Ω–∞–∂–∏–º–∞–µ–º start/–Ω–∞—á–∞—Ç—å\n\n";
        $message .= "2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /newbot\n\n";
        $message .= "3Ô∏è‚É£ –í–≤–æ–¥–∏–º –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞. –ü–æ—Ç–æ–º –≤–≤–æ–¥–∏–º –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å–ª–∏—Ç–Ω–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–æ–≤–æ _bot\n";
        $message .= "4Ô∏è‚É£ –ü—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –ø–æ—Å–ª–µ API –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—à —Ç–æ–∫–µ–Ω.\n\n\n";
        $message .= "ü™ô <b> –ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å VPN?</b>\n\n\n";
        $message .= "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>ü§ñ –ú–æ–π –±–æ—Ç</b>\n\n";
        $message .= "2Ô∏è‚É£ –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –±–æ—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞–Ω–µ–µ –≤—ã–ø—É—â–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–∞–∫–µ—Ç—ã\n";
        $message .= "<i>–ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –í–∞–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç—ã –∏ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏</i>\n\n\n";
        $message .= "üë®üèª‚Äçüíª –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>";

        $this->sendMessage($message);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    protected function showBotInfo(?int $messageId = null): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (empty($salesman->token)) {
                $salesman->state = self::STATE_WAITING_TOKEN;
                $salesman->save();

                $this->sendMessage("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>\n\n–¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @BotFather");
                return;
            }

            $message = "<blockquote>ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–æ—Ç–µ:</blockquote>\n\n";
            $message .= "üîó –í–∞—à –±–æ—Ç: $salesman->bot_link\n";
            $message .= "‚úÖ –°—Ç–∞—Ç—É—Å: " . ($salesman->bot_active ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω") . "\n\n";

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => $salesman->bot_active ? 'üü¢ –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞' : 'üî¥ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞',
                            'callback_data' => json_encode(['action' => 'toggle_bot'])
                        ],
//                        [
//                            'text' => 'üìÅ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã',
//                            'callback_data' => json_encode(['action' => 'buy_packs'])
//                        ],
                    ],
                    [
                        [
                            'text' => '‚ôªÔ∏è –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞',
                            'callback_data' => json_encode(['action' => 'change_bot'])
                        ]
                    ],
                    [
                        [
                            'text' => 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞',
                            'callback_data' => json_encode(['action' => 'reload_bot'])
                        ]
                    ]
                ]
            ];

            if ($messageId) {
                $this->editMessage($message, $keyboard, $messageId);
            } else {
                $this->sendMessage($message, $keyboard);
            }
        } catch (\Exception $e) {
            Log::error('Show bot info error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ—Ç–∞, –æ–±–Ω–æ–≤–ª—è—è –≤–µ–±—Ö—É–∫
     */
    private function reloadBot(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (empty($salesman->token)) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                return;
            }

            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –¥–ª—è –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
            $salesmanBot = new Api($salesman->token);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
            $webhookUrl = rtrim(self::WEBHOOK_BASE_URL, '/') . '/api/telegram/salesman-bot/' . $salesman->token . '/init';
            $salesmanBot->setWebhook(['url' => $webhookUrl]);

            $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω, Webhook –æ–±–Ω–æ–≤–ª–µ–Ω.");
        } catch (\Exception $e) {
            Log::error('Bot reload error: ' . $e->getMessage());
            $this->sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞: " . $e->getMessage());
        }
    }

    /**
     * Toggle bot active status
     */
    private function toggleBot(int $messageId): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->first();
            if (!$salesman) {
                $this->sendMessage("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            $salesman->bot_active = !$salesman->bot_active;
            $salesman->save();

            $this->showBotInfo($messageId);

            $status = $salesman->bot_active ? "–≤–∫–ª—é—á–µ–Ω üü¢" : "–æ—Ç–∫–ª—é—á–µ–Ω üî¥";
//            $this->sendMessage("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ " . $status);
        } catch (Exception $e) {
            Log::error('Toggle bot error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
     */
    protected function showProfile(): void
    {
        try {
            $salesman = Salesman::where('telegram_id', $this->chatId)->firstOrFail();

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            $activePacks = PackSalesman::where('salesman_id', $salesman->id)
                ->where('status', PackSalesman::PAID)
                ->count();

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
//            $telegramUser = $this->telegram->getChat(['chat_id' => $salesman->telegram_id]);
            $userUsername = $salesman->username ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            $message = "<blockquote><b>ü™™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b></blockquote>\n\n";
            $message .= "üÜî <b>Telegram ID: <code>{$salesman->telegram_id}</code></b>\n";

            if ($userUsername !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ') {
                $message .= "üìü <b>–ò–º—è:</b> <code>{$userUsername}</code>\n";
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            $message .= "üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: <code>{$activePacks}</code></b>\n";

            if ($salesman->created_at) {
                $message .= "üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>" . $salesman->created_at->format('d.m.Y H:i') . "</code></b>\n";
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $this->sendMessage($message);
        } catch (\Exception $e) {
            Log::error('Show profile error: ' . $e->getMessage());
            $this->sendErrorMessage();
        }
    }
}
