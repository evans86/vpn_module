<?php

namespace App\Http\Controllers\Api\v1;

use App\Dto\Bot\BotModuleFactory;
use App\Helpers\ApiHelpers;
use App\Http\Controllers\Controller;
use App\Http\Requests\KeyActivate\KeyActivateRequest;
use App\Http\Requests\PackSalesman\PackSalesmanBuyKeyRequest;
use App\Http\Requests\PackSalesman\PackSalesmanFreeKeyRequest;
use App\Http\Requests\PackSalesman\PackSalesmanUserKeysRequest;
use App\Models\Bot\BotModule;
use App\Models\KeyActivate\KeyActivate;
use App\Services\External\BottApi;
use App\Services\Key\KeyActivateService;
use Carbon\Carbon;
use Exception;
use GuzzleHttp\Exception\GuzzleException;
use Illuminate\Support\Facades\Log;
use RuntimeException;

class KeyActivateController extends Controller
{
    private KeyActivateService $keyActivateService;

    public function __construct(KeyActivateService $keyActivateService)
    {
        $this->middleware('api');
        $this->keyActivateService = $keyActivateService;
    }

    /**
     * –ü–æ–∫—É–ø–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –≤ –±–æ—Ç–µ –ø—Ä–æ–¥–∞–∂ (–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –≤ —Å–∏—Å—Ç–µ–º–µ)
     *
     * @param PackSalesmanBuyKeyRequest $request
     * @return array|string
     * @throws GuzzleException
     */
    public function buyKey(PackSalesmanBuyKeyRequest $request)
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –±–æ—Ç–∞
            $botModule = BotModule::where('public_key', $request->public_key)->first();
            if (!$botModule) {
                throw new RuntimeException('–ú–æ–¥—É–ª—å –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            $botModuleDto = BotModuleFactory::fromEntity($botModule);

            $userCheck = BottApi::checkUser(
                $request->user_tg_id,
                $request->user_secret_key,
                $botModule->public_key,
                $botModule->private_key
            );
            if (!$userCheck['result']) {
                throw new RuntimeException($userCheck['message']);
            }
            if ($userCheck['data']['money'] == 0) {
                throw new RuntimeException('–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ');
            }

            // –ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞ –≤ –±–æ—Ç–µ –ø—Ä–æ–¥–∞–∂
            $key = $this->keyActivateService->buyKey($botModuleDto, $request->product_id, $userCheck['data']);

            // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
            $activatedKey = $this->keyActivateService->activateModuleKey($key, $request->user_tg_id);

            return ApiHelpers::success([
                'key' => $activatedKey->id,
                'config_url' => "https://vpn-telegram.com/config/{$activatedKey->id}",
                'traffic_limit' => $activatedKey->traffic_limit,
                'traffic_limit_gb' => round($activatedKey->traffic_limit / 1024 / 1024 / 1024, 1),
                'finish_at' => $activatedKey->finish_at,
                'activated_at' => $activatedKey->activated_at,
                'status' => $activatedKey->status,
                'status_text' => $activatedKey->getStatusText(),
            ]);
        } catch (RuntimeException $r) {
            return ApiHelpers::error($r->getMessage());
        } catch (Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–ª—é—á–∞: ' . $e->getMessage(), [
                'exception' => $e,
                'user_tg_id' => $request->user_tg_id ?? null,
                'product_id' => $request->product_id ?? null
            ]);
            return ApiHelpers::error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–ª—é—á–∞');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ 5GB
     *
     * @param PackSalesmanFreeKeyRequest $request
     * @return array|string
     * @throws GuzzleException
     */
    public function getFreeKey(PackSalesmanFreeKeyRequest $request): array
    {
        try {
            $botModule = BotModule::where('public_key', $request->public_key)->first();
            if (!$botModule) {
                throw new RuntimeException('–ú–æ–¥—É–ª—å –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
            $currentMonth = Carbon::now()->startOfMonth();
            $nextMonth = Carbon::now()->addMonth()->startOfMonth();

            $hasExistingKey = KeyActivate::where('user_tg_id', $request->user_tg_id)
                ->where('traffic_limit', 5 * 1024 * 1024 * 1024)
                ->whereBetween('created_at', [$currentMonth, $nextMonth])
                ->whereNull('pack_salesman_id')
                ->exists();

            Log::debug('Free Key', [
                '$hasExistingKey' => $hasExistingKey,
            ]);

            if ($hasExistingKey) {
                return ApiHelpers::error('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Å '
                    . $nextMonth->format('d.m.Y'));
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
            $key = $this->keyActivateService->create(5 * 1024 * 1024 * 1024, null, null, null);
            $activatedKey = $this->keyActivateService->activate($key, $request->user_tg_id);

            return ApiHelpers::success([
                'key' => $activatedKey->id,
                'config_url' => "https://vpn-telegram.com/config/{$activatedKey->id}",
                'traffic_limit' => $activatedKey->traffic_limit,
                'traffic_limit_gb' => 5,
                'finish_at' => $activatedKey->finish_at,
                'activated_at' => $activatedKey->activated_at,
                'status' => $activatedKey->status,
                'status_text' => $activatedKey->getStatusText(),
                'is_free' => true,
            ]);
        } catch (RuntimeException $e) {
            return ApiHelpers::error($e->getMessage());
        } catch (Exception $e) {
            Log::error('Free key error', [
                'user_tg_id' => $request->user_tg_id,
                'error' => $e->getMessage()
            ]);
            return ApiHelpers::error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–∞');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞
     *
     * @param KeyActivateRequest $request
     * @return array|string
     */
    public function getUserKey(KeyActivateRequest $request)
    {
        try {
            $key = KeyActivate::where('id', $request->key)->first();

            // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
            if (!$key) {
                return ApiHelpers::error('–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            $resultKey = [
                'key' => $key->id,
                'config_url' => "https://vpn-telegram.com/config/{$key->id}",
                'traffic_limit' => $key->traffic_limit,
                'traffic_limit_gb' => round($key->traffic_limit / 1024 / 1024 / 1024, 1),
                'finish_at' => $key->finish_at,
                'status' => $key->status,
                'status_text' => $key->getStatusText(),
            ];

            return ApiHelpers::success([
                'key' => $resultKey,
            ]);
        } catch (RuntimeException $e) {
            return ApiHelpers::error($e->getMessage());
        } catch (Exception $e) {
            Log::error($e->getMessage());
            return ApiHelpers::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param PackSalesmanUserKeysRequest $request
     * @return array|string
     */
    public function getUserKeys(PackSalesmanUserKeysRequest $request)
    {
        try {
            $keys = KeyActivate::where('user_tg_id', $request->user_tg_id)
                ->where('status', '!=', KeyActivate::DELETED)
                ->with('packSalesman.pack') // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                ->get()
                ->map(function ($key) {
                    return [
                        'key' => $key->id,
                        'config_url' => "https://vpn-telegram.com/config/{$key->id}",
                        'traffic_limit' => $key->traffic_limit,
                        'traffic_limit_gb' => round($key->traffic_limit / 1024 / 1024 / 1024, 1),
                        'finish_at' => $key->finish_at,
                        'status' => $key->status,
                        'status_text' => $key->getStatusText()
                    ];
                });

            // –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
            if ($keys->isEmpty()) {
                return ApiHelpers::success([
                    'keys' => [],
                    'message' => '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π',
                ]);
            }

            return ApiHelpers::success([
                'keys' => $keys,
            ]);
        } catch (RuntimeException $e) {
            return ApiHelpers::error($e->getMessage());
        } catch (Exception $e) {
            Log::error($e->getMessage());
            return ApiHelpers::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–∞–±–æ—Ç–µ —Å VPN
     *
     * @return array|string
     */
    public function getVpnInstructions()
    {
        try {
            $instructions = [
                'sections' => [
                    [
                        'title' => 'üîπ –ê–∫—Ç–∏–≤–∞—Ü–∏—è VPN',
                        'steps' => [
                            '–ù–∞–∂–º–∏—Ç–µ \'üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\'',
                            '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á',
                            '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
                        ]
                    ],
                    [
                        'title' => 'üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞',
                        'steps' => [
                            '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \'üìä –°—Ç–∞—Ç—É—Å\'',
                            '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –¥–æ—Å—Ç—É–ø–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
                        ]
                    ],
                    [
                        'title' => 'üìÅ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN',
                        'links' => [
                            [
                                'title' => '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android üì±',
                                'url' => 'https://docs.google.com/document/d/1ma6QZjKgwLHdS2457I8C6k22gC2Cq3Yic8bLiMeXmeY/edit'
                            ],
                            [
                                'title' => '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS üçè',
                                'url' => 'https://docs.google.com/document/d/1f3iS-V0kFVQEA3i1hYOEaAoNMucgF60XiDZZdhRl59Q/edit'
                            ],
                            [
                                'title' => '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows üñ•Ô∏è',
                                'url' => 'https://docs.google.com/document/d/1jXNpuNY9eET1LXyVmRjHSoX6YRX9RlWGJQFSEJE_2Jg/edit'
                            ]
                        ]
                    ]
                ],
                'support_text' => 'üë®üèª‚Äçüíª –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.'
            ];

            return ApiHelpers::success([
                'structured' => $instructions
            ]);

        } catch (Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: ' . $e->getMessage());
            return ApiHelpers::error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏');
        }
    }
}
